{
  "address": "0xD19D523E588DDEc8a17b9076b1FD5faae98FAC40",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entryCostPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numberOfTickets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_RaffleIsFull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_SendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rafflePlayers",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NUM_WORDS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpKeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_entryCostPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_gasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_interval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_numberOfTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_rafflePlayers",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_raffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_recentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x40f9a3cff50da7005a6bea93350d7b4f1cbe4921041e3fd89e9024b8f4cf78d8",
  "receipt": {
    "to": null,
    "from": "0x93D41DF19e153F55ba01f9C5c65bCc5a880A0Ac5",
    "contractAddress": "0xD19D523E588DDEc8a17b9076b1FD5faae98FAC40",
    "transactionIndex": 15,
    "gasUsed": "1403895",
    "logsBloom": "0x
    "blockHash": "0xc4f3d5e7ab3c9e0cc7b97dc8ef1f0a025f2692462fa498ef655508e34b54fda9",
    "transactionHash": "0x40f9a3cff50da7005a6bea93350d7b4f1cbe4921041e3fd89e9024b8f4cf78d8",
    "logs": [],
    "blockNumber": 10748204,
    "cumulativeGasUsed": "3097091",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "300",
    "300",
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "5114",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "f17fcd46111f2d80bd4b6a7c4fc03123",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entryCostPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_RaffleIsFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_SendMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rafflePlayers\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpKeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_entryCostPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_interval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_numberOfTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_rafflePlayers\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_raffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_recentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\n\\ncontract Raffle is VRFConsumerBaseV2 {\\n\\n\\n    // contract state\\n    enum RaffleState {\\n        Open,\\n        Full,\\n        //prizeToWin,\\n        Calculating\\n    }\\n\\n    // state\\n    RaffleState public s_raffleState;\\n\\n    //errors\\n    error Raffle_SendMoreToEnterRaffle();\\n    error Raffle_RaffleNotOpen();\\n    error Raffle_RaffleIsFull();\\n    error Raffle_UpkeepNotNeeded();\\n    error Raffle_TransferFailed();\\n    \\n    uint256 public immutable i_entryCostPrice; // normal entry cost\\n    uint256 public immutable i_numberOfTickets;\\n\\n    address payable[] public s_rafflePlayers; // player address to pay/give price if won\\n\\n    uint256 public s_lastTimeStamp; // keep track of time\\n\\n    uint256 public immutable i_interval; // interval\\n\\n    VRFCoordinatorV2Interface public immutable i_vrfCoordinator;\\n    \\n    uint64 s_subscriptionId;  // Your subscription ID.\\n\\n    uint16 public constant REQUEST_CONFIRMATIONS = 3; //The default is 3, but you can set this higher.\\n\\n    // For a list of available gas lanes on each network,\\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n    // bytes32 s_keyHash;\\n    uint32 i_callbackGasLimit = 100000;\\n\\n    address public s_recentWinner;\\n\\n    \\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\n    // // For a list of available gas lanes on each network,\\n    // // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n    bytes32 public i_gasLane;\\n\\n    uint32 public constant NUM_WORDS = 1; // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\\n\\n    event RaffleEnter(address indexed rafflePlayers);  // event on raffle entered\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n    constructor(\\n        uint256 entryCostPrice, \\n        uint256 numberOfTickets,\\n        uint256 interval,\\n        address vrfCoordinatorV2,\\n        bytes32 gasLane, // keyhash,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit\\n        ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_entryCostPrice = entryCostPrice;\\n        i_numberOfTickets = numberOfTickets;\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n        i_vrfCoordinator= VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        s_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n\\n    }\\n\\n     // Pay to enter raffle\\n    function enterRaffle() public payable {\\n        // require(!isBallotTime());\\n        // require(!paused());\\n        if (msg.value < i_entryCostPrice) {\\n            revert Raffle_SendMoreToEnterRaffle();\\n        }\\n\\n        // if raffle is open\\n        if (s_raffleState != RaffleState.Open) {\\n            revert Raffle_RaffleNotOpen();\\n        }\\n        require(msg.value == i_entryCostPrice, \\\"not enough money sent!\\\");\\n        // if tickets left\\n        if (s_raffleState != RaffleState.Full) {\\n                revert Raffle_RaffleIsFull();\\n        }\\n        // enter raffle\\n        //TODO: Protection from duplicate entry (or can duplicate?)\\n        s_rafflePlayers.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n\\n     function checkUpKeep (\\n        bytes memory // check data\\n    )\\n        public\\n        view\\n        returns (\\n        bool upkeepNeeded,\\n        bytes memory // performData\\n    )\\n    {\\n        bool isOpen = RaffleState.Open == s_raffleState;\\n        bool isnotFull = RaffleState.Full == s_raffleState;\\n        bool timepassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasBalance = address(this).balance > 0;\\n        bool hasPlayers = s_rafflePlayers.length == i_numberOfTickets;\\n        upkeepNeeded = (timepassed && isnotFull && isOpen && hasBalance && hasPlayers);\\n\\n        return (upkeepNeeded, \\\"0X0\\\");\\n    }\\n\\n\\n      function performUpkeep (\\n        bytes calldata // performData\\n        ) external {\\n            (bool upkeepNeeded, ) = checkUpKeep(\\\"\\\");\\n            if (!upkeepNeeded) {\\n                revert Raffle_UpkeepNotNeeded();\\n            }\\n            s_raffleState = RaffleState.Calculating;\\n            uint256 requestId = i_vrfCoordinator.requestRandomWords (\\n                i_gasLane,\\n                s_subscriptionId,\\n                REQUEST_CONFIRMATIONS,\\n                i_callbackGasLimit,\\n                NUM_WORDS\\n\\n            );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords (\\n        uint256,\\n        uint256[] memory randomWords\\n    ) internal override {\\n            uint256 indexOfWinner = randomWords[0] % s_rafflePlayers.length;\\n            address payable recentWinner = s_rafflePlayers[indexOfWinner];\\n            s_recentWinner = recentWinner;\\n            s_rafflePlayers = new address payable[](0);\\n            s_raffleState = RaffleState.Open;\\n            s_lastTimeStamp = block.timestamp;\\n            (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n            if (!success) {\\n                revert Raffle_TransferFailed();\\n            }\\n            emit WinnerPicked(recentWinner);\\n            \\n\\n    }\\n    \\n}\",\"keccak256\":\"0xf6da9d3f718728b216580e4416b41a4c29edd5a638438690eea1eeae5d8d30da\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610120604052620186a0600360086101000a81548163ffffffff021916908363ffffffff1602179055503480156200003657600080fd5b5060405162001ae938038062001ae983398181016040528101906200005c9190620001bd565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508660a081815250508560c08181525050426002819055508460e081815250508373ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260048190555081600360006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600360086101000a81548163ffffffff021916908363ffffffff1602179055505050505050505062000363565b6000815190506200015b81620002e1565b92915050565b6000815190506200017281620002fb565b92915050565b600081519050620001898162000315565b92915050565b600081519050620001a0816200032f565b92915050565b600081519050620001b78162000349565b92915050565b600080600080600080600060e0888a031215620001df57620001de620002dc565b5b6000620001ef8a828b0162000178565b9750506020620002028a828b0162000178565b9650506040620002158a828b0162000178565b9550506060620002288a828b016200014a565b94505060806200023b8a828b0162000161565b93505060a06200024e8a828b01620001a6565b92505060c0620002618a828b016200018f565b91505092959891949750929550565b60006200027d826200028e565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b620002ec8162000270565b8114620002f857600080fd5b50565b620003068162000284565b81146200031257600080fd5b50565b6200032081620002ae565b81146200032c57600080fd5b50565b6200033a81620002b8565b81146200034657600080fd5b50565b6200035481620002c8565b81146200036057600080fd5b50565b60805160601c60a05160c05160e0516101005160601c611711620003d8600039600081816107570152610a0f0152600081816108e401526109ba0152600081816106b3015261091f015260008181610434015281816104f90152610a4401526000818161037401526103c801526117116000f3fe6080604052600436106100e85760003560e01c806367f082b01161008a5780638e879c8a116100595780638e879c8a146102c6578063aebc4550146102f1578063cc45483f1461031c578063dc809b0d14610347576100e8565b806367f082b01461021a5780636919207d1461024557806372cf6e34146102705780638638b0c61461029b576100e8565b806339d26190116100c657806339d261901461014b5780633adde048146101885780634585e33b146101b35780635e6c102e146101dc576100e8565b80631fe543e3146100ed5780632cfcc539146101165780633485404314610120575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190610fbd565b610372565b005b61011e610432565b005b34801561012c57600080fd5b5061013561066c565b60405161014291906112b1565b60405180910390f35b34801561015757600080fd5b50610172600480360381019061016d9190610f63565b610672565b60405161017f919061115e565b60405180910390f35b34801561019457600080fd5b5061019d6106b1565b6040516101aa91906112b1565b60405180910390f35b3480156101bf57600080fd5b506101da60048036038101906101d59190610ecd565b6106d5565b005b3480156101e857600080fd5b5061020360048036038101906101fe9190610f1a565b610868565b6040516102119291906111a2565b60405180910390f35b34801561022657600080fd5b5061022f6109b3565b60405161023c9190611296565b60405180910390f35b34801561025157600080fd5b5061025a6109b8565b60405161026791906112b1565b60405180910390f35b34801561027c57600080fd5b506102856109dc565b60405161029291906112cc565b60405180910390f35b3480156102a757600080fd5b506102b06109e1565b6040516102bd9190611143565b60405180910390f35b3480156102d257600080fd5b506102db610a07565b6040516102e891906111d2565b60405180910390f35b3480156102fd57600080fd5b50610306610a0d565b6040516103139190611240565b60405180910390f35b34801561032857600080fd5b50610331610a31565b60405161033e919061125b565b60405180910390f35b34801561035357600080fd5b5061035c610a42565b60405161036991906112b1565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161041b929190611179565b60405180910390fd5b61042e8282610a66565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561048c576040517f3e48252900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028111156104a05761049f6115c8565b5b60008054906101000a900460ff1660028111156104c0576104bf6115c8565b5b146104f7576040517f6eac21ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000003414610559576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055090611276565b60405180910390fd5b6001600281111561056d5761056c6115c8565b5b60008054906101000a900460ff16600281111561058d5761058c6115c8565b5b146105c4576040517f75c37eb100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60025481565b6001818154811061068257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006106ef60405180602001604052806000815250610868565b50905080610729576040517f4f6ddb1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026000806101000a81548160ff0219169083600281111561074e5761074d6115c8565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600454600360009054906101000a900467ffffffffffffffff1660038060089054906101000a900463ffffffff1660016040518663ffffffff1660e01b81526004016107e19594939291906111ed565b602060405180830381600087803b1580156107fb57600080fd5b505af115801561080f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108339190610f90565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000606060008060009054906101000a900460ff16600281111561088f5761088e6115c8565b5b600060028111156108a3576108a26115c8565b5b14905060008060009054906101000a900460ff1660028111156108c9576108c86115c8565b5b600160028111156108dd576108dc6115c8565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261091191906113a1565b1190506000804711905060007f00000000000000000000000000000000000000000000000000000000000000006001805490501490508280156109515750835b801561095a5750845b80156109635750815b801561096c5750805b9650866040518060400160405280600381526020017f3058300000000000000000000000000000000000000000000000000000000000815250965096505050505050915091565b600381565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181565b6003600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060018054905082600081518110610a8257610a816115f7565b5b6020026020010151610a949190611539565b9050600060018281548110610aac57610aab6115f7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806003600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610b3557610b34611626565b5b604051908082528060200260200182016040528015610b635781602001602082028036833780820191505090505b5060019080519060200190610b79929190610c98565b5060008060006101000a81548160ff02191690836002811115610b9f57610b9e6115c8565b5b02179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610bd19061112e565b60006040518083038185875af1925050503d8060008114610c0e576040519150601f19603f3d011682016040523d82523d6000602084013e610c13565b606091505b5050905080610c4e576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610d11579160200282015b82811115610d105782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610cb8565b5b509050610d1e9190610d22565b5090565b5b80821115610d3b576000816000905550600101610d23565b5090565b6000610d52610d4d8461130c565b6112e7565b90508083825260208201905082856020860282011115610d7557610d7461165f565b5b60005b85811015610da55781610d8b8882610ea3565b845260208401935060208301925050600181019050610d78565b5050509392505050565b6000610dc2610dbd84611338565b6112e7565b905082815260208101848484011115610dde57610ddd611664565b5b610de98482856114c6565b509392505050565b600082601f830112610e0657610e0561165a565b5b8135610e16848260208601610d3f565b91505092915050565b60008083601f840112610e3557610e3461165a565b5b8235905067ffffffffffffffff811115610e5257610e51611655565b5b602083019150836001820283011115610e6e57610e6d61165f565b5b9250929050565b600082601f830112610e8a57610e8961165a565b5b8135610e9a848260208601610daf565b91505092915050565b600081359050610eb2816116c4565b92915050565b600081519050610ec7816116c4565b92915050565b60008060208385031215610ee457610ee361166e565b5b600083013567ffffffffffffffff811115610f0257610f01611669565b5b610f0e85828601610e1f565b92509250509250929050565b600060208284031215610f3057610f2f61166e565b5b600082013567ffffffffffffffff811115610f4e57610f4d611669565b5b610f5a84828501610e75565b91505092915050565b600060208284031215610f7957610f7861166e565b5b6000610f8784828501610ea3565b91505092915050565b600060208284031215610fa657610fa561166e565b5b6000610fb484828501610eb8565b91505092915050565b60008060408385031215610fd457610fd361166e565b5b6000610fe285828601610ea3565b925050602083013567ffffffffffffffff81111561100357611002611669565b5b61100f85828601610df1565b9150509250929050565b611022816113e7565b82525050565b611031816113d5565b82525050565b611040816113f9565b82525050565b61104f81611405565b82525050565b600061106082611369565b61106a8185611374565b935061107a8185602086016114d5565b61108381611673565b840191505092915050565b6110978161147e565b82525050565b6110a681611490565b82525050565b60006110b9601683611390565b91506110c482611684565b602082019050919050565b60006110dc600083611385565b91506110e7826116ad565b600082019050919050565b6110fb81611422565b82525050565b61110a81611450565b82525050565b6111198161145a565b82525050565b6111288161146a565b82525050565b6000611139826110cf565b9150819050919050565b60006020820190506111586000830184611028565b92915050565b60006020820190506111736000830184611019565b92915050565b600060408201905061118e6000830185611028565b61119b6020830184611028565b9392505050565b60006040820190506111b76000830185611037565b81810360208301526111c98184611055565b90509392505050565b60006020820190506111e76000830184611046565b92915050565b600060a0820190506112026000830188611046565b61120f602083018761111f565b61121c60408301866110f2565b6112296060830185611110565b6112366080830184611110565b9695505050505050565b6000602082019050611255600083018461108e565b92915050565b6000602082019050611270600083018461109d565b92915050565b6000602082019050818103600083015261128f816110ac565b9050919050565b60006020820190506112ab60008301846110f2565b92915050565b60006020820190506112c66000830184611101565b92915050565b60006020820190506112e16000830184611110565b92915050565b60006112f1611302565b90506112fd8282611508565b919050565b6000604051905090565b600067ffffffffffffffff82111561132757611326611626565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561135357611352611626565b5b61135c82611673565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006113ac82611450565b91506113b783611450565b9250828210156113ca576113c961156a565b5b828203905092915050565b60006113e082611430565b9050919050565b60006113f282611430565b9050919050565b60008115159050919050565b6000819050919050565b600081905061141d826116b0565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611489826114a2565b9050919050565b600061149b8261140f565b9050919050565b60006114ad826114b4565b9050919050565b60006114bf82611430565b9050919050565b82818337600083830152505050565b60005b838110156114f35780820151818401526020810190506114d8565b83811115611502576000848401525b50505050565b61151182611673565b810181811067ffffffffffffffff821117156115305761152f611626565b5b80604052505050565b600061154482611450565b915061154f83611450565b92508261155f5761155e611599565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6e6f7420656e6f756768206d6f6e65792073656e742100000000000000000000600082015250565b50565b600381106116c1576116c06115c8565b5b50565b6116cd81611450565b81146116d857600080fd5b5056fea264697066735822122080312903ab410beb62bb845a4bfb37ca03e9b149e043995f10c42205d75ef64e64736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c806367f082b01161008a5780638e879c8a116100595780638e879c8a146102c6578063aebc4550146102f1578063cc45483f1461031c578063dc809b0d14610347576100e8565b806367f082b01461021a5780636919207d1461024557806372cf6e34146102705780638638b0c61461029b576100e8565b806339d26190116100c657806339d261901461014b5780633adde048146101885780634585e33b146101b35780635e6c102e146101dc576100e8565b80631fe543e3146100ed5780632cfcc539146101165780633485404314610120575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190610fbd565b610372565b005b61011e610432565b005b34801561012c57600080fd5b5061013561066c565b60405161014291906112b1565b60405180910390f35b34801561015757600080fd5b50610172600480360381019061016d9190610f63565b610672565b60405161017f919061115e565b60405180910390f35b34801561019457600080fd5b5061019d6106b1565b6040516101aa91906112b1565b60405180910390f35b3480156101bf57600080fd5b506101da60048036038101906101d59190610ecd565b6106d5565b005b3480156101e857600080fd5b5061020360048036038101906101fe9190610f1a565b610868565b6040516102119291906111a2565b60405180910390f35b34801561022657600080fd5b5061022f6109b3565b60405161023c9190611296565b60405180910390f35b34801561025157600080fd5b5061025a6109b8565b60405161026791906112b1565b60405180910390f35b34801561027c57600080fd5b506102856109dc565b60405161029291906112cc565b60405180910390f35b3480156102a757600080fd5b506102b06109e1565b6040516102bd9190611143565b60405180910390f35b3480156102d257600080fd5b506102db610a07565b6040516102e891906111d2565b60405180910390f35b3480156102fd57600080fd5b50610306610a0d565b6040516103139190611240565b60405180910390f35b34801561032857600080fd5b50610331610a31565b60405161033e919061125b565b60405180910390f35b34801561035357600080fd5b5061035c610a42565b60405161036991906112b1565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161041b929190611179565b60405180910390fd5b61042e8282610a66565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561048c576040517f3e48252900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028111156104a05761049f6115c8565b5b60008054906101000a900460ff1660028111156104c0576104bf6115c8565b5b146104f7576040517f6eac21ed00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000003414610559576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055090611276565b60405180910390fd5b6001600281111561056d5761056c6115c8565b5b60008054906101000a900460ff16600281111561058d5761058c6115c8565b5b146105c4576040517f75c37eb100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60025481565b6001818154811061068257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006106ef60405180602001604052806000815250610868565b50905080610729576040517f4f6ddb1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60026000806101000a81548160ff0219169083600281111561074e5761074d6115c8565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600454600360009054906101000a900467ffffffffffffffff1660038060089054906101000a900463ffffffff1660016040518663ffffffff1660e01b81526004016107e19594939291906111ed565b602060405180830381600087803b1580156107fb57600080fd5b505af115801561080f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108339190610f90565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000606060008060009054906101000a900460ff16600281111561088f5761088e6115c8565b5b600060028111156108a3576108a26115c8565b5b14905060008060009054906101000a900460ff1660028111156108c9576108c86115c8565b5b600160028111156108dd576108dc6115c8565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261091191906113a1565b1190506000804711905060007f00000000000000000000000000000000000000000000000000000000000000006001805490501490508280156109515750835b801561095a5750845b80156109635750815b801561096c5750805b9650866040518060400160405280600381526020017f3058300000000000000000000000000000000000000000000000000000000000815250965096505050505050915091565b600381565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181565b6003600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600060018054905082600081518110610a8257610a816115f7565b5b6020026020010151610a949190611539565b9050600060018281548110610aac57610aab6115f7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806003600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610b3557610b34611626565b5b604051908082528060200260200182016040528015610b635781602001602082028036833780820191505090505b5060019080519060200190610b79929190610c98565b5060008060006101000a81548160ff02191690836002811115610b9f57610b9e6115c8565b5b02179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610bd19061112e565b60006040518083038185875af1925050503d8060008114610c0e576040519150601f19603f3d011682016040523d82523d6000602084013e610c13565b606091505b5050905080610c4e576040517fba31c4f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610d11579160200282015b82811115610d105782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610cb8565b5b509050610d1e9190610d22565b5090565b5b80821115610d3b576000816000905550600101610d23565b5090565b6000610d52610d4d8461130c565b6112e7565b90508083825260208201905082856020860282011115610d7557610d7461165f565b5b60005b85811015610da55781610d8b8882610ea3565b845260208401935060208301925050600181019050610d78565b5050509392505050565b6000610dc2610dbd84611338565b6112e7565b905082815260208101848484011115610dde57610ddd611664565b5b610de98482856114c6565b509392505050565b600082601f830112610e0657610e0561165a565b5b8135610e16848260208601610d3f565b91505092915050565b60008083601f840112610e3557610e3461165a565b5b8235905067ffffffffffffffff811115610e5257610e51611655565b5b602083019150836001820283011115610e6e57610e6d61165f565b5b9250929050565b600082601f830112610e8a57610e8961165a565b5b8135610e9a848260208601610daf565b91505092915050565b600081359050610eb2816116c4565b92915050565b600081519050610ec7816116c4565b92915050565b60008060208385031215610ee457610ee361166e565b5b600083013567ffffffffffffffff811115610f0257610f01611669565b5b610f0e85828601610e1f565b92509250509250929050565b600060208284031215610f3057610f2f61166e565b5b600082013567ffffffffffffffff811115610f4e57610f4d611669565b5b610f5a84828501610e75565b91505092915050565b600060208284031215610f7957610f7861166e565b5b6000610f8784828501610ea3565b91505092915050565b600060208284031215610fa657610fa561166e565b5b6000610fb484828501610eb8565b91505092915050565b60008060408385031215610fd457610fd361166e565b5b6000610fe285828601610ea3565b925050602083013567ffffffffffffffff81111561100357611002611669565b5b61100f85828601610df1565b9150509250929050565b611022816113e7565b82525050565b611031816113d5565b82525050565b611040816113f9565b82525050565b61104f81611405565b82525050565b600061106082611369565b61106a8185611374565b935061107a8185602086016114d5565b61108381611673565b840191505092915050565b6110978161147e565b82525050565b6110a681611490565b82525050565b60006110b9601683611390565b91506110c482611684565b602082019050919050565b60006110dc600083611385565b91506110e7826116ad565b600082019050919050565b6110fb81611422565b82525050565b61110a81611450565b82525050565b6111198161145a565b82525050565b6111288161146a565b82525050565b6000611139826110cf565b9150819050919050565b60006020820190506111586000830184611028565b92915050565b60006020820190506111736000830184611019565b92915050565b600060408201905061118e6000830185611028565b61119b6020830184611028565b9392505050565b60006040820190506111b76000830185611037565b81810360208301526111c98184611055565b90509392505050565b60006020820190506111e76000830184611046565b92915050565b600060a0820190506112026000830188611046565b61120f602083018761111f565b61121c60408301866110f2565b6112296060830185611110565b6112366080830184611110565b9695505050505050565b6000602082019050611255600083018461108e565b92915050565b6000602082019050611270600083018461109d565b92915050565b6000602082019050818103600083015261128f816110ac565b9050919050565b60006020820190506112ab60008301846110f2565b92915050565b60006020820190506112c66000830184611101565b92915050565b60006020820190506112e16000830184611110565b92915050565b60006112f1611302565b90506112fd8282611508565b919050565b6000604051905090565b600067ffffffffffffffff82111561132757611326611626565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561135357611352611626565b5b61135c82611673565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006113ac82611450565b91506113b783611450565b9250828210156113ca576113c961156a565b5b828203905092915050565b60006113e082611430565b9050919050565b60006113f282611430565b9050919050565b60008115159050919050565b6000819050919050565b600081905061141d826116b0565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6000611489826114a2565b9050919050565b600061149b8261140f565b9050919050565b60006114ad826114b4565b9050919050565b60006114bf82611430565b9050919050565b82818337600083830152505050565b60005b838110156114f35780820151818401526020810190506114d8565b83811115611502576000848401525b50505050565b61151182611673565b810181811067ffffffffffffffff821117156115305761152f611626565b5b80604052505050565b600061154482611450565b915061154f83611450565b92508261155f5761155e611599565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f6e6f7420656e6f756768206d6f6e65792073656e742100000000000000000000600082015250565b50565b600381106116c1576116c06115c8565b5b50565b6116cd81611450565b81146116d857600080fd5b5056fea264697066735822122080312903ab410beb62bb845a4bfb37ca03e9b149e043995f10c42205d75ef64e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 159,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(RaffleState)156"
      },
      {
        "astId": 176,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_rafflePlayers",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 178,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 185,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_subscriptionId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 191,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_callbackGasLimit",
        "offset": 8,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 193,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 12,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 195,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "i_gasLane",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)156": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}