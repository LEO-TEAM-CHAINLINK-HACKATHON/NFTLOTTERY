{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "link",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Game_SendMoreToEnterGame",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Game_TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "GameEntry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "ReturnedRandomness",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "computerHand",
      "outputs": [
        {
          "internalType": "enum handGame.Hand",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_hand",
          "type": "uint256"
        }
      ],
      "name": "pickType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_randomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winner",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "/home/blackyinsol/.brownie/packages/smartcontractkit/chainlink@1.4.0/contracts/src/v0.8/VRFConsumerBaseV2.sol",
    "1": "/home/blackyinsol/.brownie/packages/smartcontractkit/chainlink@1.4.0/contracts/src/v0.8/interfaces/LinkTokenInterface.sol",
    "2": "/home/blackyinsol/.brownie/packages/smartcontractkit/chainlink@1.4.0/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol",
    "3": "contracts/handGame.sol"
  },
  "ast": {
    "absolutePath": "contracts/handGame.sol",
    "exportedSymbols": {
      "Game_SendMoreToEnterGame": [
        6
      ],
      "Game_TransferFailed": [
        8
      ],
      "LinkTokenInterface": [
        581
      ],
      "VRFConsumerBaseV2": [
        486
      ],
      "VRFCoordinatorV2Interface": [
        677
      ],
      "handGame": [
        428
      ]
    },
    "id": 429,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:3"
      },
      {
        "absolutePath": "/home/blackyinsol/.brownie/packages/smartcontractkit/chainlink@1.4.0/contracts/src/v0.8/interfaces/LinkTokenInterface.sol",
        "file": "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol",
        "id": 2,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 429,
        "sourceUnit": 582,
        "src": "58:73:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/blackyinsol/.brownie/packages/smartcontractkit/chainlink@1.4.0/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol",
        "file": "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol",
        "id": 3,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 429,
        "sourceUnit": 678,
        "src": "132:80:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "/home/blackyinsol/.brownie/packages/smartcontractkit/chainlink@1.4.0/contracts/src/v0.8/VRFConsumerBaseV2.sol",
        "file": "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol",
        "id": 4,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 429,
        "sourceUnit": 487,
        "src": "213:61:3",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "errorSelector": "fbbd4619",
        "id": 6,
        "name": "Game_SendMoreToEnterGame",
        "nameLocation": "282:24:3",
        "nodeType": "ErrorDefinition",
        "parameters": {
          "id": 5,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "306:2:3"
        },
        "src": "276:33:3"
      },
      {
        "errorSelector": "211c3105",
        "id": 8,
        "name": "Game_TransferFailed",
        "nameLocation": "316:19:3",
        "nodeType": "ErrorDefinition",
        "parameters": {
          "id": 7,
          "nodeType": "ParameterList",
          "parameters": [],
          "src": "335:2:3"
        },
        "src": "310:28:3"
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 9,
              "name": "VRFConsumerBaseV2",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 486,
              "src": "361:17:3"
            },
            "id": 10,
            "nodeType": "InheritanceSpecifier",
            "src": "361:17:3"
          }
        ],
        "canonicalName": "handGame",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 428,
        "linearizedBaseContracts": [
          428,
          486
        ],
        "name": "handGame",
        "nameLocation": "349:8:3",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 13,
            "mutability": "immutable",
            "name": "COORDINATOR",
            "nameLocation": "682:11:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "646:47:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$677",
              "typeString": "contract VRFCoordinatorV2Interface"
            },
            "typeName": {
              "id": 12,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 11,
                "name": "VRFCoordinatorV2Interface",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 677,
                "src": "646:25:3"
              },
              "referencedDeclaration": 677,
              "src": "646:25:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$677",
                "typeString": "contract VRFCoordinatorV2Interface"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 16,
            "mutability": "immutable",
            "name": "LINKTOKEN",
            "nameLocation": "728:9:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "699:38:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_LinkTokenInterface_$581",
              "typeString": "contract LinkTokenInterface"
            },
            "typeName": {
              "id": 15,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 14,
                "name": "LinkTokenInterface",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 581,
                "src": "699:18:3"
              },
              "referencedDeclaration": 581,
              "src": "699:18:3",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_LinkTokenInterface_$581",
                "typeString": "contract LinkTokenInterface"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 18,
            "mutability": "immutable",
            "name": "s_subscriptionId",
            "nameLocation": "790:16:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "773:33:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint64",
              "typeString": "uint64"
            },
            "typeName": {
              "id": 17,
              "name": "uint64",
              "nodeType": "ElementaryTypeName",
              "src": "773:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_uint64",
                "typeString": "uint64"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 20,
            "mutability": "immutable",
            "name": "s_keyHash",
            "nameLocation": "1037:9:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "1019:27:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 19,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "1019:7:3",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 23,
            "mutability": "immutable",
            "name": "s_callbackGasLimit",
            "nameLocation": "1480:18:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "1463:44:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint32",
              "typeString": "uint32"
            },
            "typeName": {
              "id": 21,
              "name": "uint32",
              "nodeType": "ElementaryTypeName",
              "src": "1463:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_uint32",
                "typeString": "uint32"
              }
            },
            "value": {
              "hexValue": "313030303030",
              "id": 22,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1501:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_100000_by_1",
                "typeString": "int_const 100000"
              },
              "value": "100000"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 26,
            "mutability": "immutable",
            "name": "s_requestConfirmations",
            "nameLocation": "1585:22:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "1568:43:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint16",
              "typeString": "uint16"
            },
            "typeName": {
              "id": 24,
              "name": "uint16",
              "nodeType": "ElementaryTypeName",
              "src": "1568:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_uint16",
                "typeString": "uint16"
              }
            },
            "value": {
              "hexValue": "33",
              "id": 25,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1610:1:3",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_3_by_1",
                "typeString": "int_const 3"
              },
              "value": "3"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "id": 29,
            "mutability": "immutable",
            "name": "s_numWords",
            "nameLocation": "1754:10:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "1737:31:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint32",
              "typeString": "uint32"
            },
            "typeName": {
              "id": 27,
              "name": "uint32",
              "nodeType": "ElementaryTypeName",
              "src": "1737:6:3",
              "typeDescriptions": {
                "typeIdentifier": "t_uint32",
                "typeString": "uint32"
              }
            },
            "value": {
              "hexValue": "31",
              "id": 28,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1767:1:3",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1_by_1",
                "typeString": "int_const 1"
              },
              "value": "1"
            },
            "visibility": "internal"
          },
          {
            "constant": false,
            "functionSelector": "f6eaffc8",
            "id": 32,
            "mutability": "mutable",
            "name": "s_randomWords",
            "nameLocation": "1792:13:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "1775:30:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
              "typeString": "uint256[]"
            },
            "typeName": {
              "baseType": {
                "id": 30,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1775:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 31,
              "nodeType": "ArrayTypeName",
              "src": "1775:9:3",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                "typeString": "uint256[]"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "e89e106a",
            "id": 34,
            "mutability": "mutable",
            "name": "s_requestId",
            "nameLocation": "1826:11:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "1811:26:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 33,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1811:7:3",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 36,
            "mutability": "mutable",
            "name": "s_owner",
            "nameLocation": "1851:7:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "1843:15:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 35,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1843:7:3",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "internal"
          },
          {
            "canonicalName": "handGame.Hand",
            "id": 40,
            "members": [
              {
                "id": 37,
                "name": "ROCK",
                "nameLocation": "1908:4:3",
                "nodeType": "EnumValue",
                "src": "1908:4:3"
              },
              {
                "id": 38,
                "name": "PAPER",
                "nameLocation": "1922:5:3",
                "nodeType": "EnumValue",
                "src": "1922:5:3"
              },
              {
                "id": 39,
                "name": "SCISSORS",
                "nameLocation": "1937:8:3",
                "nodeType": "EnumValue",
                "src": "1937:8:3"
              }
            ],
            "name": "Hand",
            "nameLocation": "1893:4:3",
            "nodeType": "EnumDefinition",
            "src": "1888:63:3"
          },
          {
            "constant": false,
            "id": 42,
            "mutability": "mutable",
            "name": "i_entranceFee",
            "nameLocation": "1972:13:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "1956:29:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 41,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1956:7:3",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 45,
            "mutability": "mutable",
            "name": "s_players",
            "nameLocation": "2017:9:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "1991:35:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
              "typeString": "address payable[]"
            },
            "typeName": {
              "baseType": {
                "id": 43,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "1991:15:3",
                "stateMutability": "payable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address_payable",
                  "typeString": "address payable"
                }
              },
              "id": 44,
              "nodeType": "ArrayTypeName",
              "src": "1991:17:3",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_address_payable_$dyn_storage_ptr",
                "typeString": "address payable[]"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "functionSelector": "dfbf53ae",
            "id": 47,
            "mutability": "mutable",
            "name": "winner",
            "nameLocation": "2055:6:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "2032:29:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address_payable",
              "typeString": "address payable"
            },
            "typeName": {
              "id": 46,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "2032:15:3",
              "stateMutability": "payable",
              "typeDescriptions": {
                "typeIdentifier": "t_address_payable",
                "typeString": "address payable"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 52,
            "mutability": "mutable",
            "name": "playerPick",
            "nameLocation": "2100:10:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "2067:43:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_enum$_Hand_$40_$",
              "typeString": "mapping(address => enum handGame.Hand)"
            },
            "typeName": {
              "id": 51,
              "keyType": {
                "id": 48,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2075:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "2067:24:3",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_enum$_Hand_$40_$",
                "typeString": "mapping(address => enum handGame.Hand)"
              },
              "valueType": {
                "id": 50,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 49,
                  "name": "Hand",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 40,
                  "src": "2086:4:3"
                },
                "referencedDeclaration": 40,
                "src": "2086:4:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_enum$_Hand_$40",
                  "typeString": "enum handGame.Hand"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 56,
            "mutability": "mutable",
            "name": "addressToAmountFunded",
            "nameLocation": "2152:21:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "2116:57:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
              "typeString": "mapping(address => uint256)"
            },
            "typeName": {
              "id": 55,
              "keyType": {
                "id": 53,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2124:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "2116:27:3",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                "typeString": "mapping(address => uint256)"
              },
              "valueType": {
                "id": 54,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2135:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "id": 60,
            "mutability": "mutable",
            "name": "requestIdToPlayer",
            "nameLocation": "2215:17:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "2179:53:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
              "typeString": "mapping(uint256 => address)"
            },
            "typeName": {
              "id": 59,
              "keyType": {
                "id": 57,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2187:7:3",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "nodeType": "Mapping",
              "src": "2179:27:3",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                "typeString": "mapping(uint256 => address)"
              },
              "valueType": {
                "id": 58,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "2198:7:3",
                "stateMutability": "nonpayable",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "functionSelector": "c9d9cc69",
            "id": 63,
            "mutability": "mutable",
            "name": "computerHand",
            "nameLocation": "2250:12:3",
            "nodeType": "VariableDeclaration",
            "scope": 428,
            "src": "2238:24:3",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_enum$_Hand_$40",
              "typeString": "enum handGame.Hand"
            },
            "typeName": {
              "id": 62,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 61,
                "name": "Hand",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 40,
                "src": "2238:4:3"
              },
              "referencedDeclaration": 40,
              "src": "2238:4:3",
              "typeDescriptions": {
                "typeIdentifier": "t_enum$_Hand_$40",
                "typeString": "enum handGame.Hand"
              }
            },
            "visibility": "public"
          },
          {
            "anonymous": false,
            "eventSelector": "4856b94bff5e849eded76094e0152efe4b93efd25a8d75e10a73557e9bf983aa",
            "id": 67,
            "name": "GameEntry",
            "nameLocation": "2290:9:3",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 66,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 65,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "player",
                  "nameLocation": "2316:6:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 67,
                  "src": "2300:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 64,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2300:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2299:24:3"
            },
            "src": "2284:40:3"
          },
          {
            "anonymous": false,
            "eventSelector": "efb16d61046900da527008568620fb9f8420e2f5ed4de3bfbded5035c9362b0e",
            "id": 72,
            "name": "ReturnedRandomness",
            "nameLocation": "2336:18:3",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 71,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "randomWords",
                  "nameLocation": "2365:11:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 72,
                  "src": "2355:21:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 68,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "2355:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 69,
                    "nodeType": "ArrayTypeName",
                    "src": "2355:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2354:23:3"
            },
            "src": "2330:48:3"
          },
          {
            "body": {
              "id": 117,
              "nodeType": "Block",
              "src": "2575:257:3",
              "statements": [
                {
                  "expression": {
                    "id": 92,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 88,
                      "name": "COORDINATOR",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 13,
                      "src": "2585:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$677",
                        "typeString": "contract VRFCoordinatorV2Interface"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 90,
                          "name": "vrfCoordinator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 76,
                          "src": "2625:14:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 89,
                        "name": "VRFCoordinatorV2Interface",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 677,
                        "src": "2599:25:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_VRFCoordinatorV2Interface_$677_$",
                          "typeString": "type(contract VRFCoordinatorV2Interface)"
                        }
                      },
                      "id": 91,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2599:41:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$677",
                        "typeString": "contract VRFCoordinatorV2Interface"
                      }
                    },
                    "src": "2585:55:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$677",
                      "typeString": "contract VRFCoordinatorV2Interface"
                    }
                  },
                  "id": 93,
                  "nodeType": "ExpressionStatement",
                  "src": "2585:55:3"
                },
                {
                  "expression": {
                    "id": 98,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 94,
                      "name": "LINKTOKEN",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 16,
                      "src": "2650:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LinkTokenInterface_$581",
                        "typeString": "contract LinkTokenInterface"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 96,
                          "name": "link",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 78,
                          "src": "2681:4:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 95,
                        "name": "LinkTokenInterface",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 581,
                        "src": "2662:18:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LinkTokenInterface_$581_$",
                          "typeString": "type(contract LinkTokenInterface)"
                        }
                      },
                      "id": 97,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2662:24:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_LinkTokenInterface_$581",
                        "typeString": "contract LinkTokenInterface"
                      }
                    },
                    "src": "2650:36:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_LinkTokenInterface_$581",
                      "typeString": "contract LinkTokenInterface"
                    }
                  },
                  "id": 99,
                  "nodeType": "ExpressionStatement",
                  "src": "2650:36:3"
                },
                {
                  "expression": {
                    "id": 102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 100,
                      "name": "s_keyHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 20,
                      "src": "2696:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 101,
                      "name": "keyHash",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 80,
                      "src": "2708:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "2696:19:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 103,
                  "nodeType": "ExpressionStatement",
                  "src": "2696:19:3"
                },
                {
                  "expression": {
                    "id": 107,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 104,
                      "name": "s_owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 36,
                      "src": "2725:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 105,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "2735:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 106,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "2735:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2725:20:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 108,
                  "nodeType": "ExpressionStatement",
                  "src": "2725:20:3"
                },
                {
                  "expression": {
                    "id": 111,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 109,
                      "name": "s_subscriptionId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 18,
                      "src": "2755:16:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 110,
                      "name": "subscriptionId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 74,
                      "src": "2774:14:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      }
                    },
                    "src": "2755:33:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "id": 112,
                  "nodeType": "ExpressionStatement",
                  "src": "2755:33:3"
                },
                {
                  "expression": {
                    "id": 115,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 113,
                      "name": "i_entranceFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 42,
                      "src": "2798:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 114,
                      "name": "entranceFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 82,
                      "src": "2814:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "2798:27:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 116,
                  "nodeType": "ExpressionStatement",
                  "src": "2798:27:3"
                }
              ]
            },
            "id": 118,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "id": 85,
                    "name": "vrfCoordinator",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 76,
                    "src": "2559:14:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  }
                ],
                "id": 86,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 84,
                  "name": "VRFConsumerBaseV2",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 486,
                  "src": "2541:17:3"
                },
                "nodeType": "ModifierInvocation",
                "src": "2541:33:3"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 83,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 74,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "2412:14:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 118,
                  "src": "2405:21:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 73,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "2405:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 76,
                  "mutability": "mutable",
                  "name": "vrfCoordinator",
                  "nameLocation": "2444:14:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 118,
                  "src": "2436:22:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2436:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 78,
                  "mutability": "mutable",
                  "name": "link",
                  "nameLocation": "2476:4:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 118,
                  "src": "2468:12:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 77,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2468:7:3",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 80,
                  "mutability": "mutable",
                  "name": "keyHash",
                  "nameLocation": "2498:7:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 118,
                  "src": "2490:15:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 79,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "2490:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 82,
                  "mutability": "mutable",
                  "name": "entranceFee",
                  "nameLocation": "2523:11:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 118,
                  "src": "2515:19:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 81,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2515:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2395:145:3"
            },
            "returnParameters": {
              "id": 87,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2575:0:3"
            },
            "scope": 428,
            "src": "2384:448:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 154,
              "nodeType": "Block",
              "src": "3033:241:3",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 125,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 122,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "3047:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 123,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "3047:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "id": 124,
                      "name": "i_entranceFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 42,
                      "src": "3059:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3047:25:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 130,
                  "nodeType": "IfStatement",
                  "src": "3043:89:3",
                  "trueBody": {
                    "id": 129,
                    "nodeType": "Block",
                    "src": "3074:58:3",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 126,
                            "name": "Game_SendMoreToEnterGame",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 6,
                            "src": "3095:24:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 127,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "3095:26:3",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 128,
                        "nodeType": "RevertStatement",
                        "src": "3088:33:3"
                      }
                    ]
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "expression": {
                              "id": 136,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "3164:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 137,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3164:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 135,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "3156:8:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_address_payable_$",
                            "typeString": "type(address payable)"
                          },
                          "typeName": {
                            "id": 134,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3156:8:3",
                            "stateMutability": "payable",
                            "typeDescriptions": {}
                          }
                        },
                        "id": 138,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3156:19:3",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 131,
                        "name": "s_players",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 45,
                        "src": "3141:9:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_address_payable_$dyn_storage",
                          "typeString": "address payable[] storage ref"
                        }
                      },
                      "id": 133,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "push",
                      "nodeType": "MemberAccess",
                      "src": "3141:14:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_address_payable_$dyn_storage_ptr_$_t_address_payable_$returns$__$bound_to$_t_array$_t_address_payable_$dyn_storage_ptr_$",
                        "typeString": "function (address payable[] storage pointer,address payable)"
                      }
                    },
                    "id": 139,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3141:35:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 140,
                  "nodeType": "ExpressionStatement",
                  "src": "3141:35:3"
                },
                {
                  "expression": {
                    "id": 147,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 141,
                        "name": "addressToAmountFunded",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 56,
                        "src": "3186:21:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 144,
                      "indexExpression": {
                        "expression": {
                          "id": 142,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3208:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 143,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3208:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3186:33:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 145,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "3222:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 146,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "value",
                      "nodeType": "MemberAccess",
                      "src": "3222:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3186:45:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 148,
                  "nodeType": "ExpressionStatement",
                  "src": "3186:45:3"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 150,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3256:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 151,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3256:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "id": 149,
                      "name": "GameEntry",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 67,
                      "src": "3246:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                        "typeString": "function (address)"
                      }
                    },
                    "id": 152,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3246:21:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 153,
                  "nodeType": "EmitStatement",
                  "src": "3241:26:3"
                }
              ]
            },
            "documentation": {
              "id": 119,
              "nodeType": "StructuredDocumentation",
              "src": "2838:153:3",
              "text": " @notice Requests randomness\n Assumes the subscription is funded sufficiently; \"Words\" refers to unit of data in Computer Science"
            },
            "functionSelector": "218bd577",
            "id": 155,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "enterGame",
            "nameLocation": "3006:9:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 120,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3015:2:3"
            },
            "returnParameters": {
              "id": 121,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "3033:0:3"
            },
            "scope": 428,
            "src": "2997:277:3",
            "stateMutability": "payable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 210,
              "nodeType": "Block",
              "src": "3340:470:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 168,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "baseExpression": {
                            "id": 163,
                            "name": "addressToAmountFunded",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 56,
                            "src": "3358:21:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 166,
                          "indexExpression": {
                            "expression": {
                              "id": 164,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": -15,
                              "src": "3380:3:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 165,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "src": "3380:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "3358:33:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 167,
                          "name": "i_entranceFee",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 42,
                          "src": "3395:13:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3358:50:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 162,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "3350:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 169,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3350:59:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 170,
                  "nodeType": "ExpressionStatement",
                  "src": "3350:59:3"
                },
                {
                  "expression": {
                    "id": 176,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 171,
                        "name": "addressToAmountFunded",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 56,
                        "src": "3419:21:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                          "typeString": "mapping(address => uint256)"
                        }
                      },
                      "id": 174,
                      "indexExpression": {
                        "expression": {
                          "id": 172,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3441:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 173,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3441:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3419:33:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "-=",
                    "rightHandSide": {
                      "id": 175,
                      "name": "i_entranceFee",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 42,
                      "src": "3456:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3419:50:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 177,
                  "nodeType": "ExpressionStatement",
                  "src": "3419:50:3"
                },
                {
                  "assignments": [
                    180
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 180,
                      "mutability": "mutable",
                      "name": "hand",
                      "nameLocation": "3484:4:3",
                      "nodeType": "VariableDeclaration",
                      "scope": 210,
                      "src": "3479:9:3",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Hand_$40",
                        "typeString": "enum handGame.Hand"
                      },
                      "typeName": {
                        "id": 179,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 178,
                          "name": "Hand",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 40,
                          "src": "3479:4:3"
                        },
                        "referencedDeclaration": 40,
                        "src": "3479:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Hand_$40",
                          "typeString": "enum handGame.Hand"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 184,
                  "initialValue": {
                    "arguments": [
                      {
                        "id": 182,
                        "name": "_hand",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 157,
                        "src": "3496:5:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 181,
                      "name": "Hand",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 40,
                      "src": "3491:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_enum$_Hand_$40_$",
                        "typeString": "type(enum handGame.Hand)"
                      }
                    },
                    "id": 183,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "typeConversion",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "3491:11:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_Hand_$40",
                      "typeString": "enum handGame.Hand"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "3479:23:3"
                },
                {
                  "expression": {
                    "id": 190,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 185,
                        "name": "playerPick",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 52,
                        "src": "3512:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_enum$_Hand_$40_$",
                          "typeString": "mapping(address => enum handGame.Hand)"
                        }
                      },
                      "id": 188,
                      "indexExpression": {
                        "expression": {
                          "id": 186,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -15,
                          "src": "3523:3:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 187,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "src": "3523:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3512:22:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Hand_$40",
                        "typeString": "enum handGame.Hand"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 189,
                      "name": "hand",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 180,
                      "src": "3537:4:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Hand_$40",
                        "typeString": "enum handGame.Hand"
                      }
                    },
                    "src": "3512:29:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_Hand_$40",
                      "typeString": "enum handGame.Hand"
                    }
                  },
                  "id": 191,
                  "nodeType": "ExpressionStatement",
                  "src": "3512:29:3"
                },
                {
                  "expression": {
                    "id": 201,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 192,
                      "name": "s_requestId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 34,
                      "src": "3551:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 195,
                          "name": "s_keyHash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 20,
                          "src": "3609:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 196,
                          "name": "s_subscriptionId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 18,
                          "src": "3632:16:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        {
                          "id": 197,
                          "name": "s_requestConfirmations",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 26,
                          "src": "3662:22:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          }
                        },
                        {
                          "id": 198,
                          "name": "s_callbackGasLimit",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 23,
                          "src": "3698:18:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        },
                        {
                          "id": 199,
                          "name": "s_numWords",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 29,
                          "src": "3730:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          {
                            "typeIdentifier": "t_uint16",
                            "typeString": "uint16"
                          },
                          {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          },
                          {
                            "typeIdentifier": "t_uint32",
                            "typeString": "uint32"
                          }
                        ],
                        "expression": {
                          "id": 193,
                          "name": "COORDINATOR",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 13,
                          "src": "3565:11:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_VRFCoordinatorV2Interface_$677",
                            "typeString": "contract VRFCoordinatorV2Interface"
                          }
                        },
                        "id": 194,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "requestRandomWords",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 610,
                        "src": "3565:30:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_nonpayable$_t_bytes32_$_t_uint64_$_t_uint16_$_t_uint32_$_t_uint32_$returns$_t_uint256_$",
                          "typeString": "function (bytes32,uint64,uint16,uint32,uint32) external returns (uint256)"
                        }
                      },
                      "id": 200,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "3565:185:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "3551:199:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 202,
                  "nodeType": "ExpressionStatement",
                  "src": "3551:199:3"
                },
                {
                  "expression": {
                    "id": 208,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 203,
                        "name": "requestIdToPlayer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 60,
                        "src": "3760:17:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                          "typeString": "mapping(uint256 => address)"
                        }
                      },
                      "id": 205,
                      "indexExpression": {
                        "id": 204,
                        "name": "s_requestId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 34,
                        "src": "3778:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "3760:30:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 206,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "3793:3:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 207,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "3793:10:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "3760:43:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 209,
                  "nodeType": "ExpressionStatement",
                  "src": "3760:43:3"
                }
              ]
            },
            "functionSelector": "ffa3cf81",
            "id": 211,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "pickType",
            "nameLocation": "3289:8:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 158,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 157,
                  "mutability": "mutable",
                  "name": "_hand",
                  "nameLocation": "3306:5:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 211,
                  "src": "3298:13:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 156,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3298:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3297:15:3"
            },
            "returnParameters": {
              "id": 161,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 160,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 211,
                  "src": "3331:7:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 159,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3331:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3330:9:3"
            },
            "scope": 428,
            "src": "3280:530:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "baseFunctions": [
              459
            ],
            "body": {
              "id": 415,
              "nodeType": "Block",
              "src": "4128:2236:3",
              "statements": [
                {
                  "expression": {
                    "id": 223,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 221,
                      "name": "s_randomWords",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 32,
                      "src": "4138:13:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                        "typeString": "uint256[] storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 222,
                      "name": "randomWords",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 217,
                      "src": "4154:11:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      }
                    },
                    "src": "4138:27:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                      "typeString": "uint256[] storage ref"
                    }
                  },
                  "id": 224,
                  "nodeType": "ExpressionStatement",
                  "src": "4138:27:3"
                },
                {
                  "expression": {
                    "id": 233,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 225,
                      "name": "computerHand",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 63,
                      "src": "4211:12:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Hand_$40",
                        "typeString": "enum handGame.Hand"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 231,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 227,
                              "name": "s_randomWords",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 32,
                              "src": "4231:13:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_storage",
                                "typeString": "uint256[] storage ref"
                              }
                            },
                            "id": 229,
                            "indexExpression": {
                              "hexValue": "30",
                              "id": 228,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "4245:1:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "4231:16:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "%",
                          "rightExpression": {
                            "hexValue": "33",
                            "id": 230,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "4250:1:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_3_by_1",
                              "typeString": "int_const 3"
                            },
                            "value": "3"
                          },
                          "src": "4231:20:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        ],
                        "id": 226,
                        "name": "Hand",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40,
                        "src": "4226:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_Hand_$40_$",
                          "typeString": "type(enum handGame.Hand)"
                        }
                      },
                      "id": 232,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "4226:26:3",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Hand_$40",
                        "typeString": "enum handGame.Hand"
                      }
                    },
                    "src": "4211:41:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_Hand_$40",
                      "typeString": "enum handGame.Hand"
                    }
                  },
                  "id": 234,
                  "nodeType": "ExpressionStatement",
                  "src": "4211:41:3"
                },
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_enum$_Hand_$40",
                      "typeString": "enum handGame.Hand"
                    },
                    "id": 242,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "baseExpression": {
                        "id": 235,
                        "name": "playerPick",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 52,
                        "src": "4424:10:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_enum$_Hand_$40_$",
                          "typeString": "mapping(address => enum handGame.Hand)"
                        }
                      },
                      "id": 239,
                      "indexExpression": {
                        "baseExpression": {
                          "id": 236,
                          "name": "requestIdToPlayer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 60,
                          "src": "4435:17:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                            "typeString": "mapping(uint256 => address)"
                          }
                        },
                        "id": 238,
                        "indexExpression": {
                          "id": 237,
                          "name": "requestId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 214,
                          "src": "4453:9:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "4435:28:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "IndexAccess",
                      "src": "4424:40:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Hand_$40",
                        "typeString": "enum handGame.Hand"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "id": 240,
                        "name": "Hand",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 40,
                        "src": "4468:4:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_Hand_$40_$",
                          "typeString": "type(enum handGame.Hand)"
                        }
                      },
                      "id": 241,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "ROCK",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 37,
                      "src": "4468:9:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_Hand_$40",
                        "typeString": "enum handGame.Hand"
                      }
                    },
                    "src": "4424:53:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "falseBody": {
                    "id": 409,
                    "nodeType": "Block",
                    "src": "4985:1326:3",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_enum$_Hand_$40",
                            "typeString": "enum handGame.Hand"
                          },
                          "id": 299,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "baseExpression": {
                              "id": 292,
                              "name": "playerPick",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 52,
                              "src": "5003:10:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_enum$_Hand_$40_$",
                                "typeString": "mapping(address => enum handGame.Hand)"
                              }
                            },
                            "id": 296,
                            "indexExpression": {
                              "baseExpression": {
                                "id": 293,
                                "name": "requestIdToPlayer",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 60,
                                "src": "5014:17:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                  "typeString": "mapping(uint256 => address)"
                                }
                              },
                              "id": 295,
                              "indexExpression": {
                                "id": 294,
                                "name": "requestId",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 214,
                                "src": "5032:9:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "5014:28:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5003:40:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Hand_$40",
                              "typeString": "enum handGame.Hand"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 297,
                              "name": "Hand",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40,
                              "src": "5047:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_Hand_$40_$",
                                "typeString": "type(enum handGame.Hand)"
                              }
                            },
                            "id": 298,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "PAPER",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 38,
                            "src": "5047:10:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Hand_$40",
                              "typeString": "enum handGame.Hand"
                            }
                          },
                          "src": "5003:54:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 407,
                          "nodeType": "Block",
                          "src": "5613:688:3",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_enum$_Hand_$40",
                                  "typeString": "enum handGame.Hand"
                                },
                                "id": 356,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "baseExpression": {
                                    "id": 349,
                                    "name": "playerPick",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 52,
                                    "src": "5635:10:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_enum$_Hand_$40_$",
                                      "typeString": "mapping(address => enum handGame.Hand)"
                                    }
                                  },
                                  "id": 353,
                                  "indexExpression": {
                                    "baseExpression": {
                                      "id": 350,
                                      "name": "requestIdToPlayer",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 60,
                                      "src": "5646:17:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                        "typeString": "mapping(uint256 => address)"
                                      }
                                    },
                                    "id": 352,
                                    "indexExpression": {
                                      "id": 351,
                                      "name": "requestId",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 214,
                                      "src": "5664:9:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "5646:28:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "5635:40:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Hand_$40",
                                    "typeString": "enum handGame.Hand"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "expression": {
                                    "id": 354,
                                    "name": "Hand",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 40,
                                    "src": "5679:4:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_enum$_Hand_$40_$",
                                      "typeString": "type(enum handGame.Hand)"
                                    }
                                  },
                                  "id": 355,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "SCISSORS",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 39,
                                  "src": "5679:13:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Hand_$40",
                                    "typeString": "enum handGame.Hand"
                                  }
                                },
                                "src": "5635:57:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 405,
                                "nodeType": "Block",
                                "src": "6215:72:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 403,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 395,
                                        "name": "winner",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 47,
                                        "src": "6237:6:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "id": 400,
                                                "name": "this",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": -28,
                                                "src": "6262:4:3",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_contract$_handGame_$428",
                                                  "typeString": "contract handGame"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_contract$_handGame_$428",
                                                  "typeString": "contract handGame"
                                                }
                                              ],
                                              "id": 399,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "nodeType": "ElementaryTypeNameExpression",
                                              "src": "6254:7:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_address_$",
                                                "typeString": "type(address)"
                                              },
                                              "typeName": {
                                                "id": 398,
                                                "name": "address",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "6254:7:3",
                                                "typeDescriptions": {}
                                              }
                                            },
                                            "id": 401,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "typeConversion",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "6254:13:3",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          ],
                                          "id": 397,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "6246:8:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_payable_$",
                                            "typeString": "type(address payable)"
                                          },
                                          "typeName": {
                                            "id": 396,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "6246:8:3",
                                            "stateMutability": "payable",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 402,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "6246:22:3",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      "src": "6237:31:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "id": 404,
                                    "nodeType": "ExpressionStatement",
                                    "src": "6237:31:3"
                                  }
                                ]
                              },
                              "id": 406,
                              "nodeType": "IfStatement",
                              "src": "5631:656:3",
                              "trueBody": {
                                "id": 394,
                                "nodeType": "Block",
                                "src": "5694:515:3",
                                "statements": [
                                  {
                                    "condition": {
                                      "commonType": {
                                        "typeIdentifier": "t_enum$_Hand_$40",
                                        "typeString": "enum handGame.Hand"
                                      },
                                      "id": 360,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "id": 357,
                                        "name": "computerHand",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 63,
                                        "src": "5720:12:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_enum$_Hand_$40",
                                          "typeString": "enum handGame.Hand"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "expression": {
                                          "id": 358,
                                          "name": "Hand",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 40,
                                          "src": "5736:4:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_enum$_Hand_$40_$",
                                            "typeString": "type(enum handGame.Hand)"
                                          }
                                        },
                                        "id": 359,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "memberName": "PAPER",
                                        "nodeType": "MemberAccess",
                                        "referencedDeclaration": 38,
                                        "src": "5736:10:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_enum$_Hand_$40",
                                          "typeString": "enum handGame.Hand"
                                        }
                                      },
                                      "src": "5720:26:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 393,
                                    "nodeType": "IfStatement",
                                    "src": "5716:475:3",
                                    "trueBody": {
                                      "id": 392,
                                      "nodeType": "Block",
                                      "src": "5748:443:3",
                                      "statements": [
                                        {
                                          "expression": {
                                            "id": 368,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftHandSide": {
                                              "id": 361,
                                              "name": "winner",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 47,
                                              "src": "5774:6:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address_payable",
                                                "typeString": "address payable"
                                              }
                                            },
                                            "nodeType": "Assignment",
                                            "operator": "=",
                                            "rightHandSide": {
                                              "arguments": [
                                                {
                                                  "baseExpression": {
                                                    "id": 364,
                                                    "name": "requestIdToPlayer",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 60,
                                                    "src": "5791:17:3",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                                      "typeString": "mapping(uint256 => address)"
                                                    }
                                                  },
                                                  "id": 366,
                                                  "indexExpression": {
                                                    "id": 365,
                                                    "name": "requestId",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 214,
                                                    "src": "5809:9:3",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "isConstant": false,
                                                  "isLValue": true,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "nodeType": "IndexAccess",
                                                  "src": "5791:28:3",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_address",
                                                    "typeString": "address"
                                                  }
                                                ],
                                                "id": 363,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "lValueRequested": false,
                                                "nodeType": "ElementaryTypeNameExpression",
                                                "src": "5783:8:3",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_type$_t_address_payable_$",
                                                  "typeString": "type(address payable)"
                                                },
                                                "typeName": {
                                                  "id": 362,
                                                  "name": "address",
                                                  "nodeType": "ElementaryTypeName",
                                                  "src": "5783:8:3",
                                                  "stateMutability": "payable",
                                                  "typeDescriptions": {}
                                                }
                                              },
                                              "id": 367,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "kind": "typeConversion",
                                              "lValueRequested": false,
                                              "names": [],
                                              "nodeType": "FunctionCall",
                                              "src": "5783:37:3",
                                              "tryCall": false,
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_address_payable",
                                                "typeString": "address payable"
                                              }
                                            },
                                            "src": "5774:46:3",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address_payable",
                                              "typeString": "address payable"
                                            }
                                          },
                                          "id": 369,
                                          "nodeType": "ExpressionStatement",
                                          "src": "5774:46:3"
                                        },
                                        {
                                          "assignments": [
                                            371,
                                            null
                                          ],
                                          "declarations": [
                                            {
                                              "constant": false,
                                              "id": 371,
                                              "mutability": "mutable",
                                              "name": "success",
                                              "nameLocation": "5852:7:3",
                                              "nodeType": "VariableDeclaration",
                                              "scope": 392,
                                              "src": "5847:12:3",
                                              "stateVariable": false,
                                              "storageLocation": "default",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              },
                                              "typeName": {
                                                "id": 370,
                                                "name": "bool",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "5847:4:3",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_bool",
                                                  "typeString": "bool"
                                                }
                                              },
                                              "visibility": "internal"
                                            },
                                            null
                                          ],
                                          "id": 384,
                                          "initialValue": {
                                            "arguments": [
                                              {
                                                "hexValue": "",
                                                "id": 382,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": true,
                                                "kind": "string",
                                                "lValueRequested": false,
                                                "nodeType": "Literal",
                                                "src": "5977:2:3",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                                  "typeString": "literal_string \"\""
                                                },
                                                "value": ""
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                                  "typeString": "literal_string \"\""
                                                }
                                              ],
                                              "expression": {
                                                "argumentTypes": [
                                                  {
                                                    "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                                    "typeString": "literal_string \"\""
                                                  }
                                                ],
                                                "expression": {
                                                  "id": 372,
                                                  "name": "winner",
                                                  "nodeType": "Identifier",
                                                  "overloadedDeclarations": [],
                                                  "referencedDeclaration": 47,
                                                  "src": "5865:6:3",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_address_payable",
                                                    "typeString": "address payable"
                                                  }
                                                },
                                                "id": 373,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "lValueRequested": false,
                                                "memberName": "call",
                                                "nodeType": "MemberAccess",
                                                "src": "5865:11:3",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                                  "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                                }
                                              },
                                              "id": 381,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "names": [
                                                "value"
                                              ],
                                              "nodeType": "FunctionCallOptions",
                                              "options": [
                                                {
                                                  "commonType": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  },
                                                  "id": 380,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "lValueRequested": false,
                                                  "leftExpression": {
                                                    "expression": {
                                                      "arguments": [
                                                        {
                                                          "id": 376,
                                                          "name": "this",
                                                          "nodeType": "Identifier",
                                                          "overloadedDeclarations": [],
                                                          "referencedDeclaration": -28,
                                                          "src": "5921:4:3",
                                                          "typeDescriptions": {
                                                            "typeIdentifier": "t_contract$_handGame_$428",
                                                            "typeString": "contract handGame"
                                                          }
                                                        }
                                                      ],
                                                      "expression": {
                                                        "argumentTypes": [
                                                          {
                                                            "typeIdentifier": "t_contract$_handGame_$428",
                                                            "typeString": "contract handGame"
                                                          }
                                                        ],
                                                        "id": 375,
                                                        "isConstant": false,
                                                        "isLValue": false,
                                                        "isPure": true,
                                                        "lValueRequested": false,
                                                        "nodeType": "ElementaryTypeNameExpression",
                                                        "src": "5913:7:3",
                                                        "typeDescriptions": {
                                                          "typeIdentifier": "t_type$_t_address_$",
                                                          "typeString": "type(address)"
                                                        },
                                                        "typeName": {
                                                          "id": 374,
                                                          "name": "address",
                                                          "nodeType": "ElementaryTypeName",
                                                          "src": "5913:7:3",
                                                          "typeDescriptions": {}
                                                        }
                                                      },
                                                      "id": 377,
                                                      "isConstant": false,
                                                      "isLValue": false,
                                                      "isPure": false,
                                                      "kind": "typeConversion",
                                                      "lValueRequested": false,
                                                      "names": [],
                                                      "nodeType": "FunctionCall",
                                                      "src": "5913:13:3",
                                                      "tryCall": false,
                                                      "typeDescriptions": {
                                                        "typeIdentifier": "t_address",
                                                        "typeString": "address"
                                                      }
                                                    },
                                                    "id": 378,
                                                    "isConstant": false,
                                                    "isLValue": false,
                                                    "isPure": false,
                                                    "lValueRequested": false,
                                                    "memberName": "balance",
                                                    "nodeType": "MemberAccess",
                                                    "src": "5913:21:3",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "nodeType": "BinaryOperation",
                                                  "operator": "-",
                                                  "rightExpression": {
                                                    "id": 379,
                                                    "name": "i_entranceFee",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 42,
                                                    "src": "5937:13:3",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_uint256",
                                                      "typeString": "uint256"
                                                    }
                                                  },
                                                  "src": "5913:37:3",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_uint256",
                                                    "typeString": "uint256"
                                                  }
                                                }
                                              ],
                                              "src": "5865:111:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                                                "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                              }
                                            },
                                            "id": 383,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "5865:115:3",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                              "typeString": "tuple(bool,bytes memory)"
                                            }
                                          },
                                          "nodeType": "VariableDeclarationStatement",
                                          "src": "5846:134:3"
                                        },
                                        {
                                          "condition": {
                                            "id": 386,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "UnaryOperation",
                                            "operator": "!",
                                            "prefix": true,
                                            "src": "6074:8:3",
                                            "subExpression": {
                                              "id": 385,
                                              "name": "success",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 371,
                                              "src": "6075:7:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_bool",
                                                "typeString": "bool"
                                              }
                                            },
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "id": 391,
                                          "nodeType": "IfStatement",
                                          "src": "6070:99:3",
                                          "trueBody": {
                                            "id": 390,
                                            "nodeType": "Block",
                                            "src": "6084:85:3",
                                            "statements": [
                                              {
                                                "errorCall": {
                                                  "arguments": [],
                                                  "expression": {
                                                    "argumentTypes": [],
                                                    "id": 387,
                                                    "name": "Game_TransferFailed",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": 8,
                                                    "src": "6121:19:3",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                                      "typeString": "function () pure"
                                                    }
                                                  },
                                                  "id": 388,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": false,
                                                  "kind": "functionCall",
                                                  "lValueRequested": false,
                                                  "names": [],
                                                  "nodeType": "FunctionCall",
                                                  "src": "6121:21:3",
                                                  "tryCall": false,
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_tuple$__$",
                                                    "typeString": "tuple()"
                                                  }
                                                },
                                                "id": 389,
                                                "nodeType": "RevertStatement",
                                                "src": "6114:28:3"
                                              }
                                            ]
                                          }
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        },
                        "id": 408,
                        "nodeType": "IfStatement",
                        "src": "4999:1302:3",
                        "trueBody": {
                          "id": 348,
                          "nodeType": "Block",
                          "src": "5059:548:3",
                          "statements": [
                            {
                              "condition": {
                                "commonType": {
                                  "typeIdentifier": "t_enum$_Hand_$40",
                                  "typeString": "enum handGame.Hand"
                                },
                                "id": 303,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "id": 300,
                                  "name": "computerHand",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 63,
                                  "src": "5081:12:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Hand_$40",
                                    "typeString": "enum handGame.Hand"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "==",
                                "rightExpression": {
                                  "expression": {
                                    "id": 301,
                                    "name": "Hand",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 40,
                                    "src": "5097:4:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_enum$_Hand_$40_$",
                                      "typeString": "type(enum handGame.Hand)"
                                    }
                                  },
                                  "id": 302,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "memberName": "ROCK",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 37,
                                  "src": "5097:9:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_enum$_Hand_$40",
                                    "typeString": "enum handGame.Hand"
                                  }
                                },
                                "src": "5081:25:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "falseBody": {
                                "id": 346,
                                "nodeType": "Block",
                                "src": "5521:72:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 344,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 336,
                                        "name": "winner",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 47,
                                        "src": "5543:6:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "id": 341,
                                                "name": "this",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": -28,
                                                "src": "5568:4:3",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_contract$_handGame_$428",
                                                  "typeString": "contract handGame"
                                                }
                                              }
                                            ],
                                            "expression": {
                                              "argumentTypes": [
                                                {
                                                  "typeIdentifier": "t_contract$_handGame_$428",
                                                  "typeString": "contract handGame"
                                                }
                                              ],
                                              "id": 340,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": true,
                                              "lValueRequested": false,
                                              "nodeType": "ElementaryTypeNameExpression",
                                              "src": "5560:7:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_type$_t_address_$",
                                                "typeString": "type(address)"
                                              },
                                              "typeName": {
                                                "id": 339,
                                                "name": "address",
                                                "nodeType": "ElementaryTypeName",
                                                "src": "5560:7:3",
                                                "typeDescriptions": {}
                                              }
                                            },
                                            "id": 342,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "typeConversion",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "5560:13:3",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          ],
                                          "id": 338,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "5552:8:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_payable_$",
                                            "typeString": "type(address payable)"
                                          },
                                          "typeName": {
                                            "id": 337,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "5552:8:3",
                                            "stateMutability": "payable",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 343,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "5552:22:3",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      "src": "5543:31:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "id": 345,
                                    "nodeType": "ExpressionStatement",
                                    "src": "5543:31:3"
                                  }
                                ]
                              },
                              "id": 347,
                              "nodeType": "IfStatement",
                              "src": "5077:516:3",
                              "trueBody": {
                                "id": 335,
                                "nodeType": "Block",
                                "src": "5108:407:3",
                                "statements": [
                                  {
                                    "expression": {
                                      "id": 311,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftHandSide": {
                                        "id": 304,
                                        "name": "winner",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 47,
                                        "src": "5130:6:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      "nodeType": "Assignment",
                                      "operator": "=",
                                      "rightHandSide": {
                                        "arguments": [
                                          {
                                            "baseExpression": {
                                              "id": 307,
                                              "name": "requestIdToPlayer",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 60,
                                              "src": "5147:17:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                                "typeString": "mapping(uint256 => address)"
                                              }
                                            },
                                            "id": 309,
                                            "indexExpression": {
                                              "id": 308,
                                              "name": "requestId",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 214,
                                              "src": "5165:9:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "nodeType": "IndexAccess",
                                            "src": "5147:28:3",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_address",
                                              "typeString": "address"
                                            }
                                          ],
                                          "id": 306,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "lValueRequested": false,
                                          "nodeType": "ElementaryTypeNameExpression",
                                          "src": "5139:8:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_type$_t_address_payable_$",
                                            "typeString": "type(address payable)"
                                          },
                                          "typeName": {
                                            "id": 305,
                                            "name": "address",
                                            "nodeType": "ElementaryTypeName",
                                            "src": "5139:8:3",
                                            "stateMutability": "payable",
                                            "typeDescriptions": {}
                                          }
                                        },
                                        "id": 310,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "kind": "typeConversion",
                                        "lValueRequested": false,
                                        "names": [],
                                        "nodeType": "FunctionCall",
                                        "src": "5139:37:3",
                                        "tryCall": false,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_address_payable",
                                          "typeString": "address payable"
                                        }
                                      },
                                      "src": "5130:46:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "id": 312,
                                    "nodeType": "ExpressionStatement",
                                    "src": "5130:46:3"
                                  },
                                  {
                                    "assignments": [
                                      314,
                                      null
                                    ],
                                    "declarations": [
                                      {
                                        "constant": false,
                                        "id": 314,
                                        "mutability": "mutable",
                                        "name": "success",
                                        "nameLocation": "5204:7:3",
                                        "nodeType": "VariableDeclaration",
                                        "scope": 335,
                                        "src": "5199:12:3",
                                        "stateVariable": false,
                                        "storageLocation": "default",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "typeName": {
                                          "id": 313,
                                          "name": "bool",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "5199:4:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "visibility": "internal"
                                      },
                                      null
                                    ],
                                    "id": 327,
                                    "initialValue": {
                                      "arguments": [
                                        {
                                          "hexValue": "",
                                          "id": 325,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": true,
                                          "kind": "string",
                                          "lValueRequested": false,
                                          "nodeType": "Literal",
                                          "src": "5321:2:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                            "typeString": "literal_string \"\""
                                          },
                                          "value": ""
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                            "typeString": "literal_string \"\""
                                          }
                                        ],
                                        "expression": {
                                          "argumentTypes": [
                                            {
                                              "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                              "typeString": "literal_string \"\""
                                            }
                                          ],
                                          "expression": {
                                            "id": 315,
                                            "name": "winner",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 47,
                                            "src": "5217:6:3",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_address_payable",
                                              "typeString": "address payable"
                                            }
                                          },
                                          "id": 316,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "memberName": "call",
                                          "nodeType": "MemberAccess",
                                          "src": "5217:11:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                            "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                          }
                                        },
                                        "id": 324,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "names": [
                                          "value"
                                        ],
                                        "nodeType": "FunctionCallOptions",
                                        "options": [
                                          {
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 323,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "expression": {
                                                "arguments": [
                                                  {
                                                    "id": 319,
                                                    "name": "this",
                                                    "nodeType": "Identifier",
                                                    "overloadedDeclarations": [],
                                                    "referencedDeclaration": -28,
                                                    "src": "5269:4:3",
                                                    "typeDescriptions": {
                                                      "typeIdentifier": "t_contract$_handGame_$428",
                                                      "typeString": "contract handGame"
                                                    }
                                                  }
                                                ],
                                                "expression": {
                                                  "argumentTypes": [
                                                    {
                                                      "typeIdentifier": "t_contract$_handGame_$428",
                                                      "typeString": "contract handGame"
                                                    }
                                                  ],
                                                  "id": 318,
                                                  "isConstant": false,
                                                  "isLValue": false,
                                                  "isPure": true,
                                                  "lValueRequested": false,
                                                  "nodeType": "ElementaryTypeNameExpression",
                                                  "src": "5261:7:3",
                                                  "typeDescriptions": {
                                                    "typeIdentifier": "t_type$_t_address_$",
                                                    "typeString": "type(address)"
                                                  },
                                                  "typeName": {
                                                    "id": 317,
                                                    "name": "address",
                                                    "nodeType": "ElementaryTypeName",
                                                    "src": "5261:7:3",
                                                    "typeDescriptions": {}
                                                  }
                                                },
                                                "id": 320,
                                                "isConstant": false,
                                                "isLValue": false,
                                                "isPure": false,
                                                "kind": "typeConversion",
                                                "lValueRequested": false,
                                                "names": [],
                                                "nodeType": "FunctionCall",
                                                "src": "5261:13:3",
                                                "tryCall": false,
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_address",
                                                  "typeString": "address"
                                                }
                                              },
                                              "id": 321,
                                              "isConstant": false,
                                              "isLValue": false,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "balance",
                                              "nodeType": "MemberAccess",
                                              "src": "5261:21:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": "-",
                                            "rightExpression": {
                                              "id": 322,
                                              "name": "i_entranceFee",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 42,
                                              "src": "5285:13:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "5261:37:3",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          }
                                        ],
                                        "src": "5217:103:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                                          "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                        }
                                      },
                                      "id": 326,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "5217:107:3",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                        "typeString": "tuple(bool,bytes memory)"
                                      }
                                    },
                                    "nodeType": "VariableDeclarationStatement",
                                    "src": "5198:126:3"
                                  },
                                  {
                                    "condition": {
                                      "id": 329,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "UnaryOperation",
                                      "operator": "!",
                                      "prefix": true,
                                      "src": "5410:8:3",
                                      "subExpression": {
                                        "id": 328,
                                        "name": "success",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 314,
                                        "src": "5411:7:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      },
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "id": 334,
                                    "nodeType": "IfStatement",
                                    "src": "5406:91:3",
                                    "trueBody": {
                                      "id": 333,
                                      "nodeType": "Block",
                                      "src": "5420:77:3",
                                      "statements": [
                                        {
                                          "errorCall": {
                                            "arguments": [],
                                            "expression": {
                                              "argumentTypes": [],
                                              "id": 330,
                                              "name": "Game_TransferFailed",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 8,
                                              "src": "5453:19:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                                "typeString": "function () pure"
                                              }
                                            },
                                            "id": 331,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "kind": "functionCall",
                                            "lValueRequested": false,
                                            "names": [],
                                            "nodeType": "FunctionCall",
                                            "src": "5453:21:3",
                                            "tryCall": false,
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_tuple$__$",
                                              "typeString": "tuple()"
                                            }
                                          },
                                          "id": 332,
                                          "nodeType": "RevertStatement",
                                          "src": "5446:28:3"
                                        }
                                      ]
                                    }
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "id": 410,
                  "nodeType": "IfStatement",
                  "src": "4420:1891:3",
                  "trueBody": {
                    "id": 291,
                    "nodeType": "Block",
                    "src": "4479:500:3",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_enum$_Hand_$40",
                            "typeString": "enum handGame.Hand"
                          },
                          "id": 246,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "id": 243,
                            "name": "computerHand",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 63,
                            "src": "4497:12:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Hand_$40",
                              "typeString": "enum handGame.Hand"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "expression": {
                              "id": 244,
                              "name": "Hand",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 40,
                              "src": "4513:4:3",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_Hand_$40_$",
                                "typeString": "type(enum handGame.Hand)"
                              }
                            },
                            "id": 245,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "SCISSORS",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 39,
                            "src": "4513:13:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_Hand_$40",
                              "typeString": "enum handGame.Hand"
                            }
                          },
                          "src": "4497:29:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "id": 289,
                          "nodeType": "Block",
                          "src": "4905:64:3",
                          "statements": [
                            {
                              "expression": {
                                "id": 287,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 279,
                                  "name": "winner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 47,
                                  "src": "4923:6:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "id": 284,
                                          "name": "this",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": -28,
                                          "src": "4948:4:3",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_contract$_handGame_$428",
                                            "typeString": "contract handGame"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_contract$_handGame_$428",
                                            "typeString": "contract handGame"
                                          }
                                        ],
                                        "id": 283,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "4940:7:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_address_$",
                                          "typeString": "type(address)"
                                        },
                                        "typeName": {
                                          "id": 282,
                                          "name": "address",
                                          "nodeType": "ElementaryTypeName",
                                          "src": "4940:7:3",
                                          "typeDescriptions": {}
                                        }
                                      },
                                      "id": 285,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "4940:13:3",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 281,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4932:8:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_payable_$",
                                      "typeString": "type(address payable)"
                                    },
                                    "typeName": {
                                      "id": 280,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4932:8:3",
                                      "stateMutability": "payable",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 286,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4932:22:3",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "src": "4923:31:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 288,
                              "nodeType": "ExpressionStatement",
                              "src": "4923:31:3"
                            }
                          ]
                        },
                        "id": 290,
                        "nodeType": "IfStatement",
                        "src": "4493:476:3",
                        "trueBody": {
                          "id": 278,
                          "nodeType": "Block",
                          "src": "4528:371:3",
                          "statements": [
                            {
                              "expression": {
                                "id": 254,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 247,
                                  "name": "winner",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 47,
                                  "src": "4546:6:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "arguments": [
                                    {
                                      "baseExpression": {
                                        "id": 250,
                                        "name": "requestIdToPlayer",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 60,
                                        "src": "4563:17:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
                                          "typeString": "mapping(uint256 => address)"
                                        }
                                      },
                                      "id": 252,
                                      "indexExpression": {
                                        "id": 251,
                                        "name": "requestId",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 214,
                                        "src": "4581:9:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "4563:28:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "id": 249,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "4555:8:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_payable_$",
                                      "typeString": "type(address payable)"
                                    },
                                    "typeName": {
                                      "id": 248,
                                      "name": "address",
                                      "nodeType": "ElementaryTypeName",
                                      "src": "4555:8:3",
                                      "stateMutability": "payable",
                                      "typeDescriptions": {}
                                    }
                                  },
                                  "id": 253,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "4555:37:3",
                                  "tryCall": false,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address_payable",
                                    "typeString": "address payable"
                                  }
                                },
                                "src": "4546:46:3",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "id": 255,
                              "nodeType": "ExpressionStatement",
                              "src": "4546:46:3"
                            },
                            {
                              "assignments": [
                                257,
                                null
                              ],
                              "declarations": [
                                {
                                  "constant": false,
                                  "id": 257,
                                  "mutability": "mutable",
                                  "name": "success",
                                  "nameLocation": "4616:7:3",
                                  "nodeType": "VariableDeclaration",
                                  "scope": 278,
                                  "src": "4611:12:3",
                                  "stateVariable": false,
                                  "storageLocation": "default",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "typeName": {
                                    "id": 256,
                                    "name": "bool",
                                    "nodeType": "ElementaryTypeName",
                                    "src": "4611:4:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "visibility": "internal"
                                },
                                null
                              ],
                              "id": 270,
                              "initialValue": {
                                "arguments": [
                                  {
                                    "hexValue": "",
                                    "id": 268,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "string",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "4725:2:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                      "typeString": "literal_string \"\""
                                    },
                                    "value": ""
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                      "typeString": "literal_string \"\""
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
                                        "typeString": "literal_string \"\""
                                      }
                                    ],
                                    "expression": {
                                      "id": 258,
                                      "name": "winner",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 47,
                                      "src": "4629:6:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    },
                                    "id": 259,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "call",
                                    "nodeType": "MemberAccess",
                                    "src": "4629:11:3",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
                                      "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                    }
                                  },
                                  "id": 267,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "names": [
                                    "value"
                                  ],
                                  "nodeType": "FunctionCallOptions",
                                  "options": [
                                    {
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 266,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "expression": {
                                          "arguments": [
                                            {
                                              "id": 262,
                                              "name": "this",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": -28,
                                              "src": "4677:4:3",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_contract$_handGame_$428",
                                                "typeString": "contract handGame"
                                              }
                                            }
                                          ],
                                          "expression": {
                                            "argumentTypes": [
                                              {
                                                "typeIdentifier": "t_contract$_handGame_$428",
                                                "typeString": "contract handGame"
                                              }
                                            ],
                                            "id": 261,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": true,
                                            "lValueRequested": false,
                                            "nodeType": "ElementaryTypeNameExpression",
                                            "src": "4669:7:3",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_type$_t_address_$",
                                              "typeString": "type(address)"
                                            },
                                            "typeName": {
                                              "id": 260,
                                              "name": "address",
                                              "nodeType": "ElementaryTypeName",
                                              "src": "4669:7:3",
                                              "typeDescriptions": {}
                                            }
                                          },
                                          "id": 263,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "kind": "typeConversion",
                                          "lValueRequested": false,
                                          "names": [],
                                          "nodeType": "FunctionCall",
                                          "src": "4669:13:3",
                                          "tryCall": false,
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_address",
                                            "typeString": "address"
                                          }
                                        },
                                        "id": 264,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "memberName": "balance",
                                        "nodeType": "MemberAccess",
                                        "src": "4669:21:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "-",
                                      "rightExpression": {
                                        "id": 265,
                                        "name": "i_entranceFee",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 42,
                                        "src": "4693:13:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "src": "4669:37:3",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    }
                                  ],
                                  "src": "4629:95:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
                                    "typeString": "function (bytes memory) payable returns (bool,bytes memory)"
                                  }
                                },
                                "id": 269,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "4629:99:3",
                                "tryCall": false,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
                                  "typeString": "tuple(bool,bytes memory)"
                                }
                              },
                              "nodeType": "VariableDeclarationStatement",
                              "src": "4610:118:3"
                            },
                            {
                              "condition": {
                                "id": 272,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "!",
                                "prefix": true,
                                "src": "4806:8:3",
                                "subExpression": {
                                  "id": 271,
                                  "name": "success",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 257,
                                  "src": "4807:7:3",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "id": 277,
                              "nodeType": "IfStatement",
                              "src": "4802:83:3",
                              "trueBody": {
                                "id": 276,
                                "nodeType": "Block",
                                "src": "4816:69:3",
                                "statements": [
                                  {
                                    "errorCall": {
                                      "arguments": [],
                                      "expression": {
                                        "argumentTypes": [],
                                        "id": 273,
                                        "name": "Game_TransferFailed",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 8,
                                        "src": "4845:19:3",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                                          "typeString": "function () pure"
                                        }
                                      },
                                      "id": 274,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "kind": "functionCall",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "4845:21:3",
                                      "tryCall": false,
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_tuple$__$",
                                        "typeString": "tuple()"
                                      }
                                    },
                                    "id": 275,
                                    "nodeType": "RevertStatement",
                                    "src": "4838:28:3"
                                  }
                                ]
                              }
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 412,
                        "name": "randomWords",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 217,
                        "src": "6345:11:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                          "typeString": "uint256[] memory"
                        }
                      ],
                      "id": 411,
                      "name": "ReturnedRandomness",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72,
                      "src": "6326:18:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$",
                        "typeString": "function (uint256[] memory)"
                      }
                    },
                    "id": 413,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6326:31:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 414,
                  "nodeType": "EmitStatement",
                  "src": "6321:36:3"
                }
              ]
            },
            "documentation": {
              "id": 212,
              "nodeType": "StructuredDocumentation",
              "src": "3816:192:3",
              "text": " @notice Callback function used by VRF Coordinator\n @param requestId - id of the request\n @param randomWords - array of random results from VRF Coordinator"
            },
            "id": 416,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "fulfillRandomWords",
            "nameLocation": "4022:18:3",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 219,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "4115:8:3"
            },
            "parameters": {
              "id": 218,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 214,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "4049:9:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 416,
                  "src": "4041:17:3",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 213,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4041:7:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 217,
                  "mutability": "mutable",
                  "name": "randomWords",
                  "nameLocation": "4077:11:3",
                  "nodeType": "VariableDeclaration",
                  "scope": 416,
                  "src": "4060:28:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                    "typeString": "uint256[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 215,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "4060:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 216,
                    "nodeType": "ArrayTypeName",
                    "src": "4060:9:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                      "typeString": "uint256[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4040:49:3"
            },
            "returnParameters": {
              "id": 220,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4128:0:3"
            },
            "scope": 428,
            "src": "4013:2351:3",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 426,
              "nodeType": "Block",
              "src": "6391:58:3",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 422,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 419,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "6409:3:3",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 420,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "6409:10:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 421,
                          "name": "s_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 36,
                          "src": "6423:7:3",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "6409:21:3",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 418,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "6401:7:3",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 423,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "6401:30:3",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 424,
                  "nodeType": "ExpressionStatement",
                  "src": "6401:30:3"
                },
                {
                  "id": 425,
                  "nodeType": "PlaceholderStatement",
                  "src": "6441:1:3"
                }
              ]
            },
            "id": 427,
            "name": "onlyOwner",
            "nameLocation": "6379:9:3",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 417,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6388:2:3"
            },
            "src": "6370:79:3",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 429,
        "src": "340:6111:3",
        "usedErrors": [
          6,
          8,
          437
        ]
      }
    ],
    "src": "33:6419:3"
  },
  "bytecode": "610180604052620186a06101205260036101405260016101605234801561002557600080fd5b50604051610b79380380610b79833981016040819052610044916100a9565b6001600160a01b03938416608081905260a0529190921660c05261010091909152600280546001600160a01b031916331790556001600160401b0390911660e05260035561010d565b80516001600160a01b03811681146100a457600080fd5b919050565b600080600080600060a086880312156100c157600080fd5b85516001600160401b03811681146100d857600080fd5b94506100e66020870161008d565b93506100f46040870161008d565b6060870151608090970151959894975095949392505050565b60805160a05160c05160e05161010051610120516101405161016051610a0361017660003960006103fe015260006103aa015260006103d60152600061035101526000610380015260005050600061042501526000818161017601526101b80152610a036000f3fe6080604052600436106100705760003560e01c8063dfbf53ae1161004e578063dfbf53ae146100cf578063e89e106a14610107578063f6eaffc81461012b578063ffa3cf811461014b57600080fd5b80631fe543e314610075578063218bd57714610097578063c9d9cc691461009f575b600080fd5b34801561008157600080fd5b506100956100903660046107f2565b61016b565b005b6100956101f7565b3480156100ab57600080fd5b506009546100b99060ff1681565b6040516100c691906108d2565b60405180910390f35b3480156100db57600080fd5b506005546100ef906001600160a01b031681565b6040516001600160a01b0390911681526020016100c6565b34801561011357600080fd5b5061011d60015481565b6040519081526020016100c6565b34801561013757600080fd5b5061011d6101463660046108fa565b610293565b34801561015757600080fd5b5061011d6101663660046108fa565b6102b4565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101e95760405163073e64fd60e21b81523360048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260440160405180910390fd5b6101f382826104c3565b5050565b60035434101561021a5760405163fbbd461960e01b815260040160405180910390fd5b60048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b03191633908117909155600081815260076020526040808220349055517f4856b94bff5e849eded76094e0152efe4b93efd25a8d75e10a73557e9bf983aa9190a2565b600081815481106102a357600080fd5b600091825260209091200154905081565b600354336000908152600760205260408120549091146102d357600080fd5b60035433600090815260076020526040812080549091906102f5908490610913565b909155506000905082600281111561030f5761030f6108bc565b3360009081526006602052604090208054919250829160ff1916600183600281111561033d5761033d6108bc565b02179055506040516305d3b1d360e41b81527f0000000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602482015261ffff7f000000000000000000000000000000000000000000000000000000000000000016604482015263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660648301527f00000000000000000000000000000000000000000000000000000000000000001660848201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635d3b1d309060a4016020604051808303816000875af1158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a9190610938565b6001819055600090815260086020526040902080546001600160a01b0319163317905550919050565b80516104d690600090602084019061077c565b506003600080815481106104ec576104ec610951565b90600052602060002001546105019190610967565b6002811115610512576105126108bc565b6009805460ff1916600183600281111561052e5761052e6108bc565b02179055506000828152600860209081526040808320546001600160a01b03168352600690915281205460ff16600281111561056c5761056c6108bc565b0361064a5760025b60095460ff16600281111561058b5761058b6108bc565b0361063357600082815260086020526040812054600580546001600160a01b0319166001600160a01b0390921691821790556003546105ca9047610913565b604051600081818185875af1925050503d8060008114610606576040519150601f19603f3d011682016040523d82523d6000602084013e61060b565b606091505b505090508061062d5760405163211c310560e01b815260040160405180910390fd5b50610741565b600580546001600160a01b03191630179055610741565b60016000838152600860209081526040808320546001600160a01b03168352600690915290205460ff166002811115610685576106856108bc565b03610691576000610574565b60026000838152600860209081526040808320546001600160a01b03168352600690915290205460ff1660028111156106cc576106cc6108bc565b0361072e57600160095460ff1660028111156106ea576106ea6108bc565b0361072957600082815260086020526040812054600580546001600160a01b0319166001600160a01b0390921691821790556003546105ca9047610913565b610741565b600580546001600160a01b031916301790555b7fefb16d61046900da527008568620fb9f8420e2f5ed4de3bfbded5035c9362b0e816040516107709190610989565b60405180910390a15050565b8280548282559060005260206000209081019282156107b7579160200282015b828111156107b757825182559160200191906001019061079c565b506107c39291506107c7565b5090565b5b808211156107c357600081556001016107c8565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561080557600080fd5b8235915060208084013567ffffffffffffffff8082111561082557600080fd5b818601915086601f83011261083957600080fd5b81358181111561084b5761084b6107dc565b8060051b604051601f19603f83011681018181108582111715610870576108706107dc565b60405291825284820192508381018501918983111561088e57600080fd5b938501935b828510156108ac57843584529385019392850192610893565b8096505050505050509250929050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106108f457634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561090c57600080fd5b5035919050565b60008282101561093357634e487b7160e01b600052601160045260246000fd5b500390565b60006020828403121561094a57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008261098457634e487b7160e01b600052601260045260246000fd5b500690565b6020808252825182820181905260009190848201906040850190845b818110156109c1578351835292840192918401916001016109a5565b5090969550505050505056fea264697066735822122091603671676a0c5a0003031abb7ca33910db95b6af307a9d661fc482bfb7f82764736f6c634300080d0033",
  "bytecodeSha1": "ce13a7b381ff9403c9f6e6c4b1f314b9f3ebb449",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.13+commit.abaa5c0e"
  },
  "contractName": "handGame",
  "coverageMap": {
    "branches": {
      "0": {
        "VRFConsumerBaseV2.rawFulfillRandomWords": {
          "28": [
            6717,
            6745,
            false
          ]
        }
      },
      "1": {},
      "2": {},
      "3": {
        "handGame.enterGame": {
          "19": [
            3047,
            3072,
            false
          ]
        },
        "handGame.fulfillRandomWords": {
          "21": [
            4424,
            4477,
            false
          ],
          "22": [
            4497,
            4526,
            false
          ],
          "23": [
            4807,
            4814,
            false
          ],
          "24": [
            5003,
            5057,
            false
          ],
          "25": [
            5081,
            5106,
            false
          ],
          "26": [
            5635,
            5692,
            false
          ],
          "27": [
            5720,
            5746,
            false
          ]
        },
        "handGame.pickType": {
          "20": [
            3358,
            3408,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "VRFConsumerBaseV2.rawFulfillRandomWords": {
          "0": [
            6713,
            6822
          ],
          "1": [
            6827,
            6869
          ]
        }
      },
      "1": {},
      "2": {},
      "3": {
        "handGame.enterGame": {
          "2": [
            3043,
            3132
          ],
          "3": [
            3141,
            3176
          ],
          "4": [
            3186,
            3231
          ],
          "5": [
            3241,
            3267
          ]
        },
        "handGame.fulfillRandomWords": {
          "11": [
            4138,
            4165
          ],
          "12": [
            4211,
            4252
          ],
          "13": [
            4546,
            4592
          ],
          "14": [
            4802,
            4885
          ],
          "15": [
            4923,
            4954
          ],
          "16": [
            5774,
            5820
          ],
          "17": [
            6237,
            6268
          ],
          "18": [
            6321,
            6357
          ]
        },
        "handGame.pickType": {
          "6": [
            3350,
            3409
          ],
          "7": [
            3419,
            3469
          ],
          "8": [
            3512,
            3541
          ],
          "9": [
            3551,
            3750
          ],
          "10": [
            3760,
            3803
          ]
        }
      }
    }
  },
  "dependencies": [
    "smartcontractkit/chainlink@1.4.0/LinkTokenInterface",
    "smartcontractkit/chainlink@1.4.0/VRFConsumerBaseV2",
    "smartcontractkit/chainlink@1.4.0/VRFCoordinatorV2Interface"
  ],
  "deployedBytecode": "6080604052600436106100705760003560e01c8063dfbf53ae1161004e578063dfbf53ae146100cf578063e89e106a14610107578063f6eaffc81461012b578063ffa3cf811461014b57600080fd5b80631fe543e314610075578063218bd57714610097578063c9d9cc691461009f575b600080fd5b34801561008157600080fd5b506100956100903660046107f2565b61016b565b005b6100956101f7565b3480156100ab57600080fd5b506009546100b99060ff1681565b6040516100c691906108d2565b60405180910390f35b3480156100db57600080fd5b506005546100ef906001600160a01b031681565b6040516001600160a01b0390911681526020016100c6565b34801561011357600080fd5b5061011d60015481565b6040519081526020016100c6565b34801561013757600080fd5b5061011d6101463660046108fa565b610293565b34801561015757600080fd5b5061011d6101663660046108fa565b6102b4565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101e95760405163073e64fd60e21b81523360048201526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602482015260440160405180910390fd5b6101f382826104c3565b5050565b60035434101561021a5760405163fbbd461960e01b815260040160405180910390fd5b60048054600181019091557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0180546001600160a01b03191633908117909155600081815260076020526040808220349055517f4856b94bff5e849eded76094e0152efe4b93efd25a8d75e10a73557e9bf983aa9190a2565b600081815481106102a357600080fd5b600091825260209091200154905081565b600354336000908152600760205260408120549091146102d357600080fd5b60035433600090815260076020526040812080549091906102f5908490610913565b909155506000905082600281111561030f5761030f6108bc565b3360009081526006602052604090208054919250829160ff1916600183600281111561033d5761033d6108bc565b02179055506040516305d3b1d360e41b81527f0000000000000000000000000000000000000000000000000000000000000000600482015267ffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016602482015261ffff7f000000000000000000000000000000000000000000000000000000000000000016604482015263ffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660648301527f00000000000000000000000000000000000000000000000000000000000000001660848201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635d3b1d309060a4016020604051808303816000875af1158015610476573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049a9190610938565b6001819055600090815260086020526040902080546001600160a01b0319163317905550919050565b80516104d690600090602084019061077c565b506003600080815481106104ec576104ec610951565b90600052602060002001546105019190610967565b6002811115610512576105126108bc565b6009805460ff1916600183600281111561052e5761052e6108bc565b02179055506000828152600860209081526040808320546001600160a01b03168352600690915281205460ff16600281111561056c5761056c6108bc565b0361064a5760025b60095460ff16600281111561058b5761058b6108bc565b0361063357600082815260086020526040812054600580546001600160a01b0319166001600160a01b0390921691821790556003546105ca9047610913565b604051600081818185875af1925050503d8060008114610606576040519150601f19603f3d011682016040523d82523d6000602084013e61060b565b606091505b505090508061062d5760405163211c310560e01b815260040160405180910390fd5b50610741565b600580546001600160a01b03191630179055610741565b60016000838152600860209081526040808320546001600160a01b03168352600690915290205460ff166002811115610685576106856108bc565b03610691576000610574565b60026000838152600860209081526040808320546001600160a01b03168352600690915290205460ff1660028111156106cc576106cc6108bc565b0361072e57600160095460ff1660028111156106ea576106ea6108bc565b0361072957600082815260086020526040812054600580546001600160a01b0319166001600160a01b0390921691821790556003546105ca9047610913565b610741565b600580546001600160a01b031916301790555b7fefb16d61046900da527008568620fb9f8420e2f5ed4de3bfbded5035c9362b0e816040516107709190610989565b60405180910390a15050565b8280548282559060005260206000209081019282156107b7579160200282015b828111156107b757825182559160200191906001019061079c565b506107c39291506107c7565b5090565b5b808211156107c357600081556001016107c8565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561080557600080fd5b8235915060208084013567ffffffffffffffff8082111561082557600080fd5b818601915086601f83011261083957600080fd5b81358181111561084b5761084b6107dc565b8060051b604051601f19603f83011681018181108582111715610870576108706107dc565b60405291825284820192508381018501918983111561088e57600080fd5b938501935b828510156108ac57843584529385019392850192610893565b8096505050505050509250929050565b634e487b7160e01b600052602160045260246000fd5b60208101600383106108f457634e487b7160e01b600052602160045260246000fd5b91905290565b60006020828403121561090c57600080fd5b5035919050565b60008282101561093357634e487b7160e01b600052601160045260246000fd5b500390565b60006020828403121561094a57600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60008261098457634e487b7160e01b600052601260045260246000fd5b500690565b6020808252825182820181905260009190848201906040850190845b818110156109c1578351835292840192918401916001016109a5565b5090969550505050505056fea264697066735822122091603671676a0c5a0003031abb7ca33910db95b6af307a9d661fc482bfb7f82764736f6c634300080d0033",
  "deployedSourceMap": "340:6111:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6618:256:0;;;;;;;;;;-1:-1:-1;6618:256:0;;;;;:::i;:::-;;:::i;:::-;;2997:277:3;;;:::i;2238:24::-;;;;;;;;;;-1:-1:-1;2238:24:3;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;2032:29;;;;;;;;;;-1:-1:-1;2032:29:3;;;;-1:-1:-1;;;;;2032:29:3;;;;;;-1:-1:-1;;;;;1986:32:4;;;1968:51;;1956:2;1941:18;2032:29:3;1806:219:4;1811:26:3;;;;;;;;;;;;;;;;;;;2176:25:4;;;2164:2;2149:18;1811:26:3;2030:177:4;1775:30:3;;;;;;;;;;-1:-1:-1;1775:30:3;;;;;:::i;:::-;;:::i;3280:530::-;;;;;;;;;;-1:-1:-1;3280:530:3;;;;;:::i;:::-;;:::i;6618:256:0:-;6717:10;-1:-1:-1;;;;;6731:14:0;6717:28;;6713:109;;6762:53;;-1:-1:-1;;;6762:53:0;;6788:10;6762:53;;;2609:34:4;-1:-1:-1;;;;;6800:14:0;2679:15:4;2659:18;;;2652:43;2544:18;;6762:53:0;;;;;;;6713:109;6827:42;6846:9;6857:11;6827:18;:42::i;:::-;6618:256;;:::o;2997:277:3:-;3059:13;;3047:9;:25;3043:89;;;3095:26;;-1:-1:-1;;;3095:26:3;;;;;;;;;;;3043:89;3141:9;:35;;;;;;;;;;;;-1:-1:-1;;;;;;3141:35:3;3164:10;3141:35;;;;;;-1:-1:-1;3186:33:3;;;:21;3141:35;3186:33;;;;;3222:9;3186:45;;3246:21;;;-1:-1:-1;3246:21:3;2997:277::o;1775:30::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1775:30:3;:::o;3280:530::-;3395:13;;3380:10;3331:7;3358:33;;;:21;:33;;;;;;3331:7;;3358:50;3350:59;;;;;;3456:13;;3441:10;3419:33;;;;:21;:33;;;;;:50;;:33;;;:50;;3456:13;;3419:50;:::i;:::-;;;;-1:-1:-1;3479:9:3;;-1:-1:-1;3496:5:3;3491:11;;;;;;;;:::i;:::-;3523:10;3512:22;;;;:10;:22;;;;;:29;;3479:23;;-1:-1:-1;3479:23:3;;-1:-1:-1;;3512:29:3;;3479:23;3512:29;;;;;;;;:::i;:::-;;;;;-1:-1:-1;3565:185:3;;-1:-1:-1;;;3565:185:3;;3609:9;3565:185;;;3184:25:4;3257:18;3632:16:3;3245:31:4;3225:18;;;3218:59;3325:6;3662:22:3;3313:19:4;3293:18;;;3286:47;3352:10;3698:18:3;3398:15:4;;3378:18;;;3371:43;3730:10:3;3451:15:4;3430:19;;;3423:44;3565:11:3;-1:-1:-1;;;;;3565:30:3;;;;3156:19:4;;3565:185:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3551:11;:199;;;3760:30;;;;:17;:30;;;;;:43;;-1:-1:-1;;;;;;3760:43:3;3793:10;3760:43;;;-1:-1:-1;3280:530:3;;-1:-1:-1;3280:530:3:o;4013:2351::-;4138:27;;;;:13;;:27;;;;;:::i;:::-;;4250:1;4231:13;4245:1;4231:16;;;;;;;;:::i;:::-;;;;;;;;;:20;;;;:::i;:::-;4226:26;;;;;;;;:::i;:::-;4211:12;:41;;-1:-1:-1;;4211:41:3;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;4468:9:3;4435:28;;;:17;:28;;;;;;;;;-1:-1:-1;;;;;4435:28:3;4424:40;;:10;:40;;;;;;;;:53;;;;;;;;:::i;:::-;;4420:1891;;4513:13;4497:29;:12;;;;:29;;;;;;;;:::i;:::-;;4493:476;;4563:28;;;;:17;:28;;;;;;4546:6;:46;;-1:-1:-1;;;;;;4546:46:3;-1:-1:-1;;;;;4563:28:3;;;4546:46;;;;;4693:13;;4669:37;;:21;:37;:::i;:::-;4629:99;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4610:118;;;4807:7;4802:83;;4845:21;;-1:-1:-1;;;4845:21:3;;;;;;;;;;;4802:83;4528:371;4420:1891;;4493:476;4923:6;:31;;-1:-1:-1;;;;;;4923:31:3;4948:4;4923:31;;;4420:1891;;;5047:10;5003:40;5014:28;;;:17;:28;;;;;;;;;-1:-1:-1;;;;;5014:28:3;5003:40;;:10;:40;;;;;;;;:54;;;;;;;;:::i;:::-;;4999:1302;;5097:9;5081:25;;4999:1302;5679:13;5635:40;5646:28;;;:17;:28;;;;;;;;;-1:-1:-1;;;;;5646:28:3;5635:40;;:10;:40;;;;;;;;:57;;;;;;;;:::i;:::-;;5631:656;;5736:10;5720:12;;;;:26;;;;;;;;:::i;:::-;;5716:475;;5791:28;;;;:17;:28;;;;;;5774:6;:46;;-1:-1:-1;;;;;;5774:46:3;-1:-1:-1;;;;;5791:28:3;;;5774:46;;;;;5937:13;;5913:37;;:21;:37;:::i;5716:475::-;5631:656;;;6237:6;:31;;-1:-1:-1;;;;;;6237:31:3;6262:4;6237:31;;;5631:656;6326:31;6345:11;6326:31;;;;;;:::i;:::-;;;;;;;;4013:2351;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:4;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:1183;239:6;247;300:2;288:9;279:7;275:23;271:32;268:52;;;316:1;313;306:12;268:52;352:9;339:23;329:33;;381:2;434;423:9;419:18;406:32;457:18;498:2;490:6;487:14;484:34;;;514:1;511;504:12;484:34;552:6;541:9;537:22;527:32;;597:7;590:4;586:2;582:13;578:27;568:55;;619:1;616;609:12;568:55;655:2;642:16;677:2;673;670:10;667:36;;;683:18;;:::i;:::-;729:2;726:1;722:10;761:2;755:9;824:2;820:7;815:2;811;807:11;803:25;795:6;791:38;879:6;867:10;864:22;859:2;847:10;844:18;841:46;838:72;;;890:18;;:::i;:::-;926:2;919:22;976:18;;;1010:15;;;;-1:-1:-1;1052:11:4;;;1048:20;;;1080:19;;;1077:39;;;1112:1;1109;1102:12;1077:39;1136:11;;;;1156:142;1172:6;1167:3;1164:15;1156:142;;;1238:17;;1226:30;;1189:12;;;;1276;;;;1156:142;;;1317:6;1307:16;;;;;;;;146:1183;;;;;:::o;1334:127::-;1395:10;1390:3;1386:20;1383:1;1376:31;1426:4;1423:1;1416:15;1450:4;1447:1;1440:15;1466:335;1605:2;1590:18;;1638:1;1627:13;;1617:144;;1683:10;1678:3;1674:20;1671:1;1664:31;1718:4;1715:1;1708:15;1746:4;1743:1;1736:15;1617:144;1770:25;;;1466:335;:::o;2212:180::-;2271:6;2324:2;2312:9;2303:7;2299:23;2295:32;2292:52;;;2340:1;2337;2330:12;2292:52;-1:-1:-1;2363:23:4;;2212:180;-1:-1:-1;2212:180:4:o;2706:222::-;2746:4;2774:1;2771;2768:8;2765:131;;;2818:10;2813:3;2809:20;2806:1;2799:31;2853:4;2850:1;2843:15;2881:4;2878:1;2871:15;2765:131;-1:-1:-1;2913:9:4;;2706:222::o;3478:184::-;3548:6;3601:2;3589:9;3580:7;3576:23;3572:32;3569:52;;;3617:1;3614;3607:12;3569:52;-1:-1:-1;3640:16:4;;3478:184;-1:-1:-1;3478:184:4:o;3667:127::-;3728:10;3723:3;3719:20;3716:1;3709:31;3759:4;3756:1;3749:15;3783:4;3780:1;3773:15;3799:209;3831:1;3857;3847:132;;3901:10;3896:3;3892:20;3889:1;3882:31;3936:4;3933:1;3926:15;3964:4;3961:1;3954:15;3847:132;-1:-1:-1;3993:9:4;;3799:209::o;4223:632::-;4394:2;4446:21;;;4516:13;;4419:18;;;4538:22;;;4365:4;;4394:2;4617:15;;;;4591:2;4576:18;;;4365:4;4660:169;4674:6;4671:1;4668:13;4660:169;;;4735:13;;4723:26;;4804:15;;;;4769:12;;;;4696:1;4689:9;4660:169;;;-1:-1:-1;4846:3:4;;4223:632;-1:-1:-1;;;;;;4223:632:4:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "enterGame()": {
        "notice": "Requests randomness Assumes the subscription is funded sufficiently; \"Words\" refers to unit of data in Computer Science"
      }
    },
    "version": 1
  },
  "offset": [
    340,
    6451
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x70 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDFBF53AE GT PUSH2 0x4E JUMPI DUP1 PUSH4 0xDFBF53AE EQ PUSH2 0xCF JUMPI DUP1 PUSH4 0xE89E106A EQ PUSH2 0x107 JUMPI DUP1 PUSH4 0xF6EAFFC8 EQ PUSH2 0x12B JUMPI DUP1 PUSH4 0xFFA3CF81 EQ PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FE543E3 EQ PUSH2 0x75 JUMPI DUP1 PUSH4 0x218BD577 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0xC9D9CC69 EQ PUSH2 0x9F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x81 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x7F2 JUMP JUMPDEST PUSH2 0x16B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x95 PUSH2 0x1F7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x9 SLOAD PUSH2 0xB9 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC6 SWAP2 SWAP1 PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x5 SLOAD PUSH2 0xEF SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x113 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0x8FA JUMP JUMPDEST PUSH2 0x293 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x157 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x11D PUSH2 0x166 CALLDATASIZE PUSH1 0x4 PUSH2 0x8FA JUMP JUMPDEST PUSH2 0x2B4 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x1E9 JUMPI PUSH1 0x40 MLOAD PUSH4 0x73E64FD PUSH1 0xE2 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1F3 DUP3 DUP3 PUSH2 0x4C3 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD CALLVALUE LT ISZERO PUSH2 0x21A JUMPI PUSH1 0x40 MLOAD PUSH4 0xFBBD4619 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 CALLVALUE SWAP1 SSTORE MLOAD PUSH32 0x4856B94BFF5E849EDED76094E0152EFE4B93EFD25A8D75E10A73557E9BF983AA SWAP2 SWAP1 LOG2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x2A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 EQ PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x2F5 SWAP1 DUP5 SWAP1 PUSH2 0x913 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x0 SWAP1 POP DUP3 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x30F JUMPI PUSH2 0x30F PUSH2 0x8BC JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP2 SWAP3 POP DUP3 SWAP2 PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x33D JUMPI PUSH2 0x33D PUSH2 0x8BC JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x40 MLOAD PUSH4 0x5D3B1D3 PUSH1 0xE4 SHL DUP2 MSTORE PUSH32 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH2 0xFFFF PUSH32 0x0 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0xFFFFFFFF PUSH32 0x0 DUP2 AND PUSH1 0x64 DUP4 ADD MSTORE PUSH32 0x0 AND PUSH1 0x84 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x5D3B1D30 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x476 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x49A SWAP2 SWAP1 PUSH2 0x938 JUMP JUMPDEST PUSH1 0x1 DUP2 SWAP1 SSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 MLOAD PUSH2 0x4D6 SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x20 DUP5 ADD SWAP1 PUSH2 0x77C JUMP JUMPDEST POP PUSH1 0x3 PUSH1 0x0 DUP1 DUP2 SLOAD DUP2 LT PUSH2 0x4EC JUMPI PUSH2 0x4EC PUSH2 0x951 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x501 SWAP2 SWAP1 PUSH2 0x967 JUMP JUMPDEST PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x512 JUMPI PUSH2 0x512 PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 DUP4 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x52E JUMPI PUSH2 0x52E PUSH2 0x8BC JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x6 SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x56C JUMPI PUSH2 0x56C PUSH2 0x8BC JUMP JUMPDEST SUB PUSH2 0x64A JUMPI PUSH1 0x2 JUMPDEST PUSH1 0x9 SLOAD PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x58B JUMPI PUSH2 0x58B PUSH2 0x8BC JUMP JUMPDEST SUB PUSH2 0x633 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x3 SLOAD PUSH2 0x5CA SWAP1 SELFBALANCE PUSH2 0x913 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x606 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x60B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x62D JUMPI PUSH1 0x40 MLOAD PUSH4 0x211C3105 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x741 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND ADDRESS OR SWAP1 SSTORE PUSH2 0x741 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x6 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x685 JUMPI PUSH2 0x685 PUSH2 0x8BC JUMP JUMPDEST SUB PUSH2 0x691 JUMPI PUSH1 0x0 PUSH2 0x574 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 MSTORE PUSH1 0x6 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x6CC JUMPI PUSH2 0x6CC PUSH2 0x8BC JUMP JUMPDEST SUB PUSH2 0x72E JUMPI PUSH1 0x1 PUSH1 0x9 SLOAD PUSH1 0xFF AND PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x6EA JUMPI PUSH2 0x6EA PUSH2 0x8BC JUMP JUMPDEST SUB PUSH2 0x729 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 0x3 SLOAD PUSH2 0x5CA SWAP1 SELFBALANCE PUSH2 0x913 JUMP JUMPDEST PUSH2 0x741 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND ADDRESS OR SWAP1 SSTORE JUMPDEST PUSH32 0xEFB16D61046900DA527008568620FB9F8420E2F5ED4DE3BFBDED5035C9362B0E DUP2 PUSH1 0x40 MLOAD PUSH2 0x770 SWAP2 SWAP1 PUSH2 0x989 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x7B7 JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x7B7 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x79C JUMP JUMPDEST POP PUSH2 0x7C3 SWAP3 SWAP2 POP PUSH2 0x7C7 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x7C3 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x7C8 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x805 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP1 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x825 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x839 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x84B JUMPI PUSH2 0x84B PUSH2 0x7DC JUMP JUMPDEST DUP1 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH1 0x1F NOT PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0x870 JUMPI PUSH2 0x870 PUSH2 0x7DC JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP2 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 POP DUP4 DUP2 ADD DUP6 ADD SWAP2 DUP10 DUP4 GT ISZERO PUSH2 0x88E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 DUP6 ADD SWAP4 JUMPDEST DUP3 DUP6 LT ISZERO PUSH2 0x8AC JUMPI DUP5 CALLDATALOAD DUP5 MSTORE SWAP4 DUP6 ADD SWAP4 SWAP3 DUP6 ADD SWAP3 PUSH2 0x893 JUMP JUMPDEST DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x3 DUP4 LT PUSH2 0x8F4 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x90C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x933 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x94A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x984 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x9C1 JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x9A5 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP2 PUSH1 0x36 PUSH18 0x676A0C5A0003031ABB7CA33910DB95B6AF30 PUSH27 0x9D661FC482BFB7F82764736F6C634300080D003300000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        340,
        6451
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "5": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "7": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "8": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "LT",
      "path": "3"
    },
    "9": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x70"
    },
    "12": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "13": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "15": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "CALLDATALOAD",
      "path": "3"
    },
    "16": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xE0"
    },
    "18": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "SHR",
      "path": "3"
    },
    "19": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "DUP1",
      "path": "3"
    },
    "20": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xDFBF53AE"
    },
    "25": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "GT",
      "path": "3"
    },
    "26": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4E"
    },
    "29": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "30": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "DUP1",
      "path": "3"
    },
    "31": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xDFBF53AE"
    },
    "36": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "EQ",
      "path": "3"
    },
    "37": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xCF"
    },
    "40": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "41": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "DUP1",
      "path": "3"
    },
    "42": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xE89E106A"
    },
    "47": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "EQ",
      "path": "3"
    },
    "48": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x107"
    },
    "51": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "52": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "DUP1",
      "path": "3"
    },
    "53": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xF6EAFFC8"
    },
    "58": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "EQ",
      "path": "3"
    },
    "59": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x12B"
    },
    "62": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "63": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "DUP1",
      "path": "3"
    },
    "64": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xFFA3CF81"
    },
    "69": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "EQ",
      "path": "3"
    },
    "70": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x14B"
    },
    "73": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "74": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "76": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "DUP1",
      "path": "3"
    },
    "77": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "REVERT",
      "path": "3"
    },
    "78": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "79": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "DUP1",
      "path": "3"
    },
    "80": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x1FE543E3"
    },
    "85": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "EQ",
      "path": "3"
    },
    "86": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x75"
    },
    "89": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "90": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "DUP1",
      "path": "3"
    },
    "91": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x218BD577"
    },
    "96": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "EQ",
      "path": "3"
    },
    "97": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x97"
    },
    "100": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "101": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "DUP1",
      "path": "3"
    },
    "102": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0xC9D9CC69"
    },
    "107": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "EQ",
      "path": "3"
    },
    "108": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x9F"
    },
    "111": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "112": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "113": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "115": {
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "DUP1",
      "path": "3"
    },
    "116": {
      "first_revert": true,
      "fn": null,
      "offset": [
        340,
        6451
      ],
      "op": "REVERT",
      "path": "3"
    },
    "117": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "118": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "119": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "DUP1",
      "path": "0"
    },
    "120": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "121": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x81"
    },
    "124": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "125": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "127": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "DUP1",
      "path": "0"
    },
    "128": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "REVERT",
      "path": "0"
    },
    "129": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "130": {
      "op": "POP"
    },
    "131": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x95"
    },
    "134": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x90"
    },
    "137": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "138": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "140": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x7F2"
    },
    "143": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "jump": "i",
      "offset": [
        6618,
        6874
      ],
      "op": "JUMP",
      "path": "0"
    },
    "144": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "145": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x16B"
    },
    "148": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "jump": "i",
      "offset": [
        6618,
        6874
      ],
      "op": "JUMP",
      "path": "0"
    },
    "149": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "150": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "STOP",
      "path": "0"
    },
    "151": {
      "fn": "handGame.enterGame",
      "offset": [
        2997,
        3274
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "152": {
      "fn": "handGame.enterGame",
      "offset": [
        2997,
        3274
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x95"
    },
    "155": {
      "fn": "handGame.enterGame",
      "offset": [
        2997,
        3274
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x1F7"
    },
    "158": {
      "fn": "handGame.enterGame",
      "jump": "i",
      "offset": [
        2997,
        3274
      ],
      "op": "JUMP",
      "path": "3"
    },
    "159": {
      "offset": [
        2238,
        2262
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "160": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "CALLVALUE",
      "path": "3"
    },
    "161": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "DUP1",
      "path": "3"
    },
    "162": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "163": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xAB"
    },
    "166": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "167": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "169": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "DUP1",
      "path": "3"
    },
    "170": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "REVERT",
      "path": "3"
    },
    "171": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "172": {
      "op": "POP"
    },
    "173": {
      "offset": [
        2238,
        2262
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x9"
    },
    "175": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "176": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xB9"
    },
    "179": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "180": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xFF"
    },
    "182": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "AND",
      "path": "3"
    },
    "183": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "DUP2",
      "path": "3"
    },
    "184": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "JUMP",
      "path": "3"
    },
    "185": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "186": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "188": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "189": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC6"
    },
    "192": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "193": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "194": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8D2"
    },
    "197": {
      "fn": "handGame.enterGame",
      "jump": "i",
      "offset": [
        2238,
        2262
      ],
      "op": "JUMP",
      "path": "3"
    },
    "198": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "199": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "201": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "202": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "DUP1",
      "path": "3"
    },
    "203": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "204": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "SUB",
      "path": "3"
    },
    "205": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "206": {
      "fn": "handGame.enterGame",
      "offset": [
        2238,
        2262
      ],
      "op": "RETURN",
      "path": "3"
    },
    "207": {
      "offset": [
        2032,
        2061
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "208": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "CALLVALUE",
      "path": "3"
    },
    "209": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "DUP1",
      "path": "3"
    },
    "210": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "211": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xDB"
    },
    "214": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "215": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "217": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "DUP1",
      "path": "3"
    },
    "218": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "REVERT",
      "path": "3"
    },
    "219": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "220": {
      "op": "POP"
    },
    "221": {
      "offset": [
        2032,
        2061
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x5"
    },
    "223": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "224": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xEF"
    },
    "227": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "228": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "230": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "232": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "234": {
      "op": "SHL"
    },
    "235": {
      "op": "SUB"
    },
    "236": {
      "offset": [
        2032,
        2061
      ],
      "op": "AND",
      "path": "3"
    },
    "237": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "DUP2",
      "path": "3"
    },
    "238": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "JUMP",
      "path": "3"
    },
    "239": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "240": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "242": {
      "fn": "handGame.enterGame",
      "offset": [
        2032,
        2061
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "243": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "245": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "247": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "249": {
      "op": "SHL"
    },
    "250": {
      "op": "SUB"
    },
    "251": {
      "op": "SWAP1"
    },
    "252": {
      "op": "SWAP2"
    },
    "253": {
      "op": "AND"
    },
    "254": {
      "op": "DUP2"
    },
    "255": {
      "op": "MSTORE"
    },
    "256": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "258": {
      "op": "ADD"
    },
    "259": {
      "offset": [
        2032,
        2061
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC6"
    },
    "262": {
      "op": "JUMP"
    },
    "263": {
      "offset": [
        1811,
        1837
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "264": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "CALLVALUE",
      "path": "3"
    },
    "265": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "DUP1",
      "path": "3"
    },
    "266": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "267": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x113"
    },
    "270": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "271": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "273": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "DUP1",
      "path": "3"
    },
    "274": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "REVERT",
      "path": "3"
    },
    "275": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "276": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "POP",
      "path": "3"
    },
    "277": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x11D"
    },
    "280": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "282": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "283": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "DUP2",
      "path": "3"
    },
    "284": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "JUMP",
      "path": "3"
    },
    "285": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "286": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "288": {
      "fn": "handGame.enterGame",
      "offset": [
        1811,
        1837
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "289": {
      "op": "SWAP1"
    },
    "290": {
      "op": "DUP2"
    },
    "291": {
      "op": "MSTORE"
    },
    "292": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "294": {
      "op": "ADD"
    },
    "295": {
      "offset": [
        1811,
        1837
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0xC6"
    },
    "298": {
      "op": "JUMP"
    },
    "299": {
      "offset": [
        1775,
        1805
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "300": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "CALLVALUE",
      "path": "3"
    },
    "301": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "DUP1",
      "path": "3"
    },
    "302": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "303": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x137"
    },
    "306": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "307": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "309": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "DUP1",
      "path": "3"
    },
    "310": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "REVERT",
      "path": "3"
    },
    "311": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "312": {
      "op": "POP"
    },
    "313": {
      "offset": [
        1775,
        1805
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x11D"
    },
    "316": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x146"
    },
    "319": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "320": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "322": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8FA"
    },
    "325": {
      "fn": "handGame.enterGame",
      "jump": "i",
      "offset": [
        1775,
        1805
      ],
      "op": "JUMP",
      "path": "3"
    },
    "326": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "327": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x293"
    },
    "330": {
      "fn": "handGame.enterGame",
      "jump": "i",
      "offset": [
        1775,
        1805
      ],
      "op": "JUMP",
      "path": "3"
    },
    "331": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "332": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "CALLVALUE",
      "path": "3"
    },
    "333": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "DUP1",
      "path": "3"
    },
    "334": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "335": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x157"
    },
    "338": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "339": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "341": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "DUP1",
      "path": "3"
    },
    "342": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "REVERT",
      "path": "3"
    },
    "343": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "344": {
      "op": "POP"
    },
    "345": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x11D"
    },
    "348": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x166"
    },
    "351": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "CALLDATASIZE",
      "path": "3"
    },
    "352": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "354": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8FA"
    },
    "357": {
      "fn": "handGame.pickType",
      "jump": "i",
      "offset": [
        3280,
        3810
      ],
      "op": "JUMP",
      "path": "3"
    },
    "358": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "359": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2B4"
    },
    "362": {
      "fn": "handGame.pickType",
      "jump": "i",
      "offset": [
        3280,
        3810
      ],
      "op": "JUMP",
      "path": "3"
    },
    "363": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "364": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6717,
        6727
      ],
      "op": "CALLER",
      "path": "0",
      "statement": 0
    },
    "365": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "367": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "369": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "371": {
      "op": "SHL"
    },
    "372": {
      "op": "SUB"
    },
    "373": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6731,
        6745
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x0"
    },
    "406": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6717,
        6745
      ],
      "op": "AND",
      "path": "0"
    },
    "407": {
      "branch": 28,
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6717,
        6745
      ],
      "op": "EQ",
      "path": "0"
    },
    "408": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6713,
        6822
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E9"
    },
    "411": {
      "branch": 28,
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6713,
        6822
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "412": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "414": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "415": {
      "op": "PUSH4",
      "value": "0x73E64FD"
    },
    "420": {
      "op": "PUSH1",
      "value": "0xE2"
    },
    "422": {
      "op": "SHL"
    },
    "423": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "DUP2",
      "path": "0"
    },
    "424": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "425": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6788,
        6798
      ],
      "op": "CALLER",
      "path": "0"
    },
    "426": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "428": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "DUP3",
      "path": "0"
    },
    "429": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "ADD",
      "path": "0"
    },
    "430": {
      "op": "MSTORE"
    },
    "431": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "433": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "435": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "437": {
      "op": "SHL"
    },
    "438": {
      "op": "SUB"
    },
    "439": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6800,
        6814
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x0"
    },
    "472": {
      "op": "AND"
    },
    "473": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "475": {
      "op": "DUP3"
    },
    "476": {
      "op": "ADD"
    },
    "477": {
      "op": "MSTORE"
    },
    "478": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "480": {
      "op": "ADD"
    },
    "481": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "483": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "484": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "DUP1",
      "path": "0"
    },
    "485": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "486": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "SUB",
      "path": "0"
    },
    "487": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "488": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6762,
        6815
      ],
      "op": "REVERT",
      "path": "0"
    },
    "489": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6713,
        6822
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "490": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6827,
        6869
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 1,
      "value": "0x1F3"
    },
    "493": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6846,
        6855
      ],
      "op": "DUP3",
      "path": "0"
    },
    "494": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6857,
        6868
      ],
      "op": "DUP3",
      "path": "0"
    },
    "495": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6827,
        6845
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x4C3"
    },
    "498": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "jump": "i",
      "offset": [
        6827,
        6869
      ],
      "op": "JUMP",
      "path": "0"
    },
    "499": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6827,
        6869
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "500": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "POP",
      "path": "0"
    },
    "501": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "offset": [
        6618,
        6874
      ],
      "op": "POP",
      "path": "0"
    },
    "502": {
      "fn": "VRFConsumerBaseV2.rawFulfillRandomWords",
      "jump": "o",
      "offset": [
        6618,
        6874
      ],
      "op": "JUMP",
      "path": "0"
    },
    "503": {
      "fn": "handGame.enterGame",
      "offset": [
        2997,
        3274
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "504": {
      "fn": "handGame.enterGame",
      "offset": [
        3059,
        3072
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 2,
      "value": "0x3"
    },
    "506": {
      "fn": "handGame.enterGame",
      "offset": [
        3059,
        3072
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "507": {
      "fn": "handGame.enterGame",
      "offset": [
        3047,
        3056
      ],
      "op": "CALLVALUE",
      "path": "3"
    },
    "508": {
      "branch": 19,
      "fn": "handGame.enterGame",
      "offset": [
        3047,
        3072
      ],
      "op": "LT",
      "path": "3"
    },
    "509": {
      "fn": "handGame.enterGame",
      "offset": [
        3043,
        3132
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "510": {
      "fn": "handGame.enterGame",
      "offset": [
        3043,
        3132
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x21A"
    },
    "513": {
      "branch": 19,
      "fn": "handGame.enterGame",
      "offset": [
        3043,
        3132
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "514": {
      "fn": "handGame.enterGame",
      "offset": [
        3095,
        3121
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "516": {
      "fn": "handGame.enterGame",
      "offset": [
        3095,
        3121
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "517": {
      "op": "PUSH4",
      "value": "0xFBBD4619"
    },
    "522": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "524": {
      "op": "SHL"
    },
    "525": {
      "fn": "handGame.enterGame",
      "offset": [
        3095,
        3121
      ],
      "op": "DUP2",
      "path": "3"
    },
    "526": {
      "fn": "handGame.enterGame",
      "offset": [
        3095,
        3121
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "527": {
      "fn": "handGame.enterGame",
      "offset": [
        3095,
        3121
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "529": {
      "fn": "handGame.enterGame",
      "offset": [
        3095,
        3121
      ],
      "op": "ADD",
      "path": "3"
    },
    "530": {
      "fn": "handGame.enterGame",
      "offset": [
        3095,
        3121
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "532": {
      "fn": "handGame.enterGame",
      "offset": [
        3095,
        3121
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "533": {
      "fn": "handGame.enterGame",
      "offset": [
        3095,
        3121
      ],
      "op": "DUP1",
      "path": "3"
    },
    "534": {
      "fn": "handGame.enterGame",
      "offset": [
        3095,
        3121
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "535": {
      "fn": "handGame.enterGame",
      "offset": [
        3095,
        3121
      ],
      "op": "SUB",
      "path": "3"
    },
    "536": {
      "fn": "handGame.enterGame",
      "offset": [
        3095,
        3121
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "537": {
      "fn": "handGame.enterGame",
      "offset": [
        3095,
        3121
      ],
      "op": "REVERT",
      "path": "3"
    },
    "538": {
      "fn": "handGame.enterGame",
      "offset": [
        3043,
        3132
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "539": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3150
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 3,
      "value": "0x4"
    },
    "541": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "DUP1",
      "path": "3"
    },
    "542": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "543": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "545": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "DUP2",
      "path": "3"
    },
    "546": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "ADD",
      "path": "3"
    },
    "547": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "548": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "549": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "550": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B"
    },
    "583": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "ADD",
      "path": "3"
    },
    "584": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "DUP1",
      "path": "3"
    },
    "585": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "586": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "588": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "590": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "592": {
      "op": "SHL"
    },
    "593": {
      "op": "SUB"
    },
    "594": {
      "op": "NOT"
    },
    "595": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "AND",
      "path": "3"
    },
    "596": {
      "fn": "handGame.enterGame",
      "offset": [
        3164,
        3174
      ],
      "op": "CALLER",
      "path": "3"
    },
    "597": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "598": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "DUP2",
      "path": "3"
    },
    "599": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "OR",
      "path": "3"
    },
    "600": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "601": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "602": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "603": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "605": {
      "fn": "handGame.enterGame",
      "offset": [
        3186,
        3219
      ],
      "op": "DUP2",
      "path": "3",
      "statement": 4
    },
    "606": {
      "fn": "handGame.enterGame",
      "offset": [
        3186,
        3219
      ],
      "op": "DUP2",
      "path": "3"
    },
    "607": {
      "fn": "handGame.enterGame",
      "offset": [
        3186,
        3219
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "608": {
      "fn": "handGame.enterGame",
      "offset": [
        3186,
        3207
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x7"
    },
    "610": {
      "fn": "handGame.enterGame",
      "offset": [
        3141,
        3176
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "612": {
      "fn": "handGame.enterGame",
      "offset": [
        3186,
        3219
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "613": {
      "fn": "handGame.enterGame",
      "offset": [
        3186,
        3219
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "615": {
      "fn": "handGame.enterGame",
      "offset": [
        3186,
        3219
      ],
      "op": "DUP1",
      "path": "3"
    },
    "616": {
      "fn": "handGame.enterGame",
      "offset": [
        3186,
        3219
      ],
      "op": "DUP3",
      "path": "3"
    },
    "617": {
      "fn": "handGame.enterGame",
      "offset": [
        3186,
        3219
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "618": {
      "fn": "handGame.enterGame",
      "offset": [
        3222,
        3231
      ],
      "op": "CALLVALUE",
      "path": "3"
    },
    "619": {
      "fn": "handGame.enterGame",
      "offset": [
        3186,
        3231
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "620": {
      "fn": "handGame.enterGame",
      "offset": [
        3186,
        3231
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "621": {
      "fn": "handGame.enterGame",
      "offset": [
        3246,
        3267
      ],
      "op": "MLOAD",
      "path": "3",
      "statement": 5
    },
    "622": {
      "fn": "handGame.enterGame",
      "offset": [
        3246,
        3267
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0x4856B94BFF5E849EDED76094E0152EFE4B93EFD25A8D75E10A73557E9BF983AA"
    },
    "655": {
      "fn": "handGame.enterGame",
      "offset": [
        3246,
        3267
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "656": {
      "op": "SWAP1"
    },
    "657": {
      "fn": "handGame.enterGame",
      "offset": [
        3246,
        3267
      ],
      "op": "LOG2",
      "path": "3"
    },
    "658": {
      "fn": "handGame.enterGame",
      "jump": "o",
      "offset": [
        2997,
        3274
      ],
      "op": "JUMP",
      "path": "3"
    },
    "659": {
      "offset": [
        1775,
        1805
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "660": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "662": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "DUP2",
      "path": "3"
    },
    "663": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "DUP2",
      "path": "3"
    },
    "664": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "665": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "DUP2",
      "path": "3"
    },
    "666": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "LT",
      "path": "3"
    },
    "667": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2A3"
    },
    "670": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "671": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "673": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "DUP1",
      "path": "3"
    },
    "674": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "REVERT",
      "path": "3"
    },
    "675": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "676": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "678": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "679": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "DUP3",
      "path": "3"
    },
    "680": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "681": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "683": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "684": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "685": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "686": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "ADD",
      "path": "3"
    },
    "687": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "688": {
      "fn": "handGame.enterGame",
      "offset": [
        1775,
        1805
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "689": {
      "op": "POP"
    },
    "690": {
      "offset": [
        1775,
        1805
      ],
      "op": "DUP2",
      "path": "3"
    },
    "691": {
      "fn": "handGame.enterGame",
      "jump": "o",
      "offset": [
        1775,
        1805
      ],
      "op": "JUMP",
      "path": "3"
    },
    "692": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "693": {
      "fn": "handGame.pickType",
      "offset": [
        3395,
        3408
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 6,
      "value": "0x3"
    },
    "695": {
      "fn": "handGame.pickType",
      "offset": [
        3395,
        3408
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "696": {
      "fn": "handGame.pickType",
      "offset": [
        3380,
        3390
      ],
      "op": "CALLER",
      "path": "3"
    },
    "697": {
      "fn": "handGame.pickType",
      "offset": [
        3331,
        3338
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "699": {
      "fn": "handGame.pickType",
      "offset": [
        3358,
        3391
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "700": {
      "fn": "handGame.pickType",
      "offset": [
        3358,
        3391
      ],
      "op": "DUP2",
      "path": "3"
    },
    "701": {
      "fn": "handGame.pickType",
      "offset": [
        3358,
        3391
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "702": {
      "fn": "handGame.pickType",
      "offset": [
        3358,
        3379
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x7"
    },
    "704": {
      "fn": "handGame.pickType",
      "offset": [
        3358,
        3391
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "706": {
      "fn": "handGame.pickType",
      "offset": [
        3358,
        3391
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "707": {
      "fn": "handGame.pickType",
      "offset": [
        3358,
        3391
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "709": {
      "fn": "handGame.pickType",
      "offset": [
        3358,
        3391
      ],
      "op": "DUP2",
      "path": "3"
    },
    "710": {
      "fn": "handGame.pickType",
      "offset": [
        3358,
        3391
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "711": {
      "fn": "handGame.pickType",
      "offset": [
        3358,
        3391
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "712": {
      "fn": "handGame.pickType",
      "offset": [
        3331,
        3338
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "713": {
      "fn": "handGame.pickType",
      "offset": [
        3331,
        3338
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "714": {
      "branch": 20,
      "fn": "handGame.pickType",
      "offset": [
        3358,
        3408
      ],
      "op": "EQ",
      "path": "3"
    },
    "715": {
      "fn": "handGame.pickType",
      "offset": [
        3350,
        3409
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2D3"
    },
    "718": {
      "branch": 20,
      "fn": "handGame.pickType",
      "offset": [
        3350,
        3409
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "719": {
      "fn": "handGame.pickType",
      "offset": [
        3350,
        3409
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "721": {
      "fn": "handGame.pickType",
      "offset": [
        3350,
        3409
      ],
      "op": "DUP1",
      "path": "3"
    },
    "722": {
      "fn": "handGame.pickType",
      "offset": [
        3350,
        3409
      ],
      "op": "REVERT",
      "path": "3"
    },
    "723": {
      "fn": "handGame.pickType",
      "offset": [
        3350,
        3409
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "724": {
      "fn": "handGame.pickType",
      "offset": [
        3456,
        3469
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 7,
      "value": "0x3"
    },
    "726": {
      "fn": "handGame.pickType",
      "offset": [
        3456,
        3469
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "727": {
      "fn": "handGame.pickType",
      "offset": [
        3441,
        3451
      ],
      "op": "CALLER",
      "path": "3"
    },
    "728": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3452
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "730": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3452
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "731": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3452
      ],
      "op": "DUP2",
      "path": "3"
    },
    "732": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3452
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "733": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3440
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x7"
    },
    "735": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3452
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "737": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3452
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "738": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3452
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "740": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3452
      ],
      "op": "DUP2",
      "path": "3"
    },
    "741": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3452
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "742": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3469
      ],
      "op": "DUP1",
      "path": "3"
    },
    "743": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3469
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "744": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3452
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "745": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3452
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "746": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3452
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "747": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3469
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x2F5"
    },
    "750": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3469
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "751": {
      "fn": "handGame.pickType",
      "offset": [
        3456,
        3469
      ],
      "op": "DUP5",
      "path": "3"
    },
    "752": {
      "fn": "handGame.pickType",
      "offset": [
        3456,
        3469
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "753": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3469
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x913"
    },
    "756": {
      "fn": "handGame.pickType",
      "jump": "i",
      "offset": [
        3419,
        3469
      ],
      "op": "JUMP",
      "path": "3"
    },
    "757": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3469
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "758": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3469
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "759": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3469
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "760": {
      "fn": "handGame.pickType",
      "offset": [
        3419,
        3469
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "761": {
      "op": "POP"
    },
    "762": {
      "fn": "handGame.pickType",
      "offset": [
        3479,
        3488
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "764": {
      "fn": "handGame.pickType",
      "offset": [
        3479,
        3488
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "765": {
      "op": "POP"
    },
    "766": {
      "fn": "handGame.pickType",
      "offset": [
        3496,
        3501
      ],
      "op": "DUP3",
      "path": "3"
    },
    "767": {
      "fn": "handGame.pickType",
      "offset": [
        3491,
        3502
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "769": {
      "fn": "handGame.pickType",
      "offset": [
        3491,
        3502
      ],
      "op": "DUP2",
      "path": "3"
    },
    "770": {
      "fn": "handGame.pickType",
      "offset": [
        3491,
        3502
      ],
      "op": "GT",
      "path": "3"
    },
    "771": {
      "fn": "handGame.pickType",
      "offset": [
        3491,
        3502
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "772": {
      "fn": "handGame.pickType",
      "offset": [
        3491,
        3502
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x30F"
    },
    "775": {
      "fn": "handGame.pickType",
      "offset": [
        3491,
        3502
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "776": {
      "fn": "handGame.pickType",
      "offset": [
        3491,
        3502
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x30F"
    },
    "779": {
      "fn": "handGame.pickType",
      "offset": [
        3491,
        3502
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8BC"
    },
    "782": {
      "fn": "handGame.pickType",
      "jump": "i",
      "offset": [
        3491,
        3502
      ],
      "op": "JUMP",
      "path": "3"
    },
    "783": {
      "fn": "handGame.pickType",
      "offset": [
        3491,
        3502
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "784": {
      "fn": "handGame.pickType",
      "offset": [
        3523,
        3533
      ],
      "op": "CALLER",
      "path": "3",
      "statement": 8
    },
    "785": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3534
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "787": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3534
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "788": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3534
      ],
      "op": "DUP2",
      "path": "3"
    },
    "789": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3534
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "790": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3522
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x6"
    },
    "792": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3534
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "794": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3534
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "795": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3534
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "797": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3534
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "798": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3534
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "799": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "DUP1",
      "path": "3"
    },
    "800": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "801": {
      "fn": "handGame.pickType",
      "offset": [
        3479,
        3502
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "802": {
      "fn": "handGame.pickType",
      "offset": [
        3479,
        3502
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "803": {
      "op": "POP"
    },
    "804": {
      "fn": "handGame.pickType",
      "offset": [
        3479,
        3502
      ],
      "op": "DUP3",
      "path": "3"
    },
    "805": {
      "fn": "handGame.pickType",
      "offset": [
        3479,
        3502
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "806": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "808": {
      "op": "NOT"
    },
    "809": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "AND",
      "path": "3"
    },
    "810": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "812": {
      "fn": "handGame.pickType",
      "offset": [
        3479,
        3502
      ],
      "op": "DUP4",
      "path": "3"
    },
    "813": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "815": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "DUP2",
      "path": "3"
    },
    "816": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "GT",
      "path": "3"
    },
    "817": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "818": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x33D"
    },
    "821": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "822": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x33D"
    },
    "825": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8BC"
    },
    "828": {
      "fn": "handGame.pickType",
      "jump": "i",
      "offset": [
        3512,
        3541
      ],
      "op": "JUMP",
      "path": "3"
    },
    "829": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "830": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "MUL",
      "path": "3"
    },
    "831": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "OR",
      "path": "3"
    },
    "832": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "833": {
      "fn": "handGame.pickType",
      "offset": [
        3512,
        3541
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "834": {
      "op": "POP"
    },
    "835": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 9,
      "value": "0x40"
    },
    "837": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "838": {
      "op": "PUSH4",
      "value": "0x5D3B1D3"
    },
    "843": {
      "op": "PUSH1",
      "value": "0xE4"
    },
    "845": {
      "op": "SHL"
    },
    "846": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "DUP2",
      "path": "3"
    },
    "847": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "848": {
      "fn": "handGame.pickType",
      "offset": [
        3609,
        3618
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0x0"
    },
    "881": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "883": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "DUP3",
      "path": "3"
    },
    "884": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "ADD",
      "path": "3"
    },
    "885": {
      "op": "MSTORE"
    },
    "886": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "895": {
      "fn": "handGame.pickType",
      "offset": [
        3632,
        3648
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0x0"
    },
    "928": {
      "op": "AND"
    },
    "929": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "931": {
      "op": "DUP3"
    },
    "932": {
      "op": "ADD"
    },
    "933": {
      "op": "MSTORE"
    },
    "934": {
      "op": "PUSH2",
      "value": "0xFFFF"
    },
    "937": {
      "fn": "handGame.pickType",
      "offset": [
        3662,
        3684
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0x0"
    },
    "970": {
      "op": "AND"
    },
    "971": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "973": {
      "op": "DUP3"
    },
    "974": {
      "op": "ADD"
    },
    "975": {
      "op": "MSTORE"
    },
    "976": {
      "op": "PUSH4",
      "value": "0xFFFFFFFF"
    },
    "981": {
      "fn": "handGame.pickType",
      "offset": [
        3698,
        3716
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0x0"
    },
    "1014": {
      "op": "DUP2"
    },
    "1015": {
      "op": "AND"
    },
    "1016": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "1018": {
      "op": "DUP4"
    },
    "1019": {
      "op": "ADD"
    },
    "1020": {
      "op": "MSTORE"
    },
    "1021": {
      "fn": "handGame.pickType",
      "offset": [
        3730,
        3740
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0x0"
    },
    "1054": {
      "op": "AND"
    },
    "1055": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "1057": {
      "op": "DUP3"
    },
    "1058": {
      "op": "ADD"
    },
    "1059": {
      "op": "MSTORE"
    },
    "1060": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3576
      ],
      "op": "PUSH32",
      "path": "3",
      "value": "0x0"
    },
    "1093": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1095": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1097": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1099": {
      "op": "SHL"
    },
    "1100": {
      "op": "SUB"
    },
    "1101": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3595
      ],
      "op": "AND",
      "path": "3"
    },
    "1102": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3595
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1103": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3595
      ],
      "op": "PUSH4",
      "path": "3",
      "value": "0x5D3B1D30"
    },
    "1108": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3595
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1109": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "1111": {
      "op": "ADD"
    },
    "1112": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1114": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1116": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1117": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1118": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1119": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "SUB",
      "path": "3"
    },
    "1120": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1121": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1123": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "DUP8",
      "path": "3"
    },
    "1124": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "GAS",
      "path": "3"
    },
    "1125": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "CALL",
      "path": "3"
    },
    "1126": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1127": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1128": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1129": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x476"
    },
    "1132": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1133": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1134": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1136": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1137": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "RETURNDATACOPY",
      "path": "3"
    },
    "1138": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1139": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1141": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "REVERT",
      "path": "3"
    },
    "1142": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1143": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "POP",
      "path": "3"
    },
    "1144": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "POP",
      "path": "3"
    },
    "1145": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "POP",
      "path": "3"
    },
    "1146": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "POP",
      "path": "3"
    },
    "1147": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1149": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1150": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1151": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1153": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "NOT",
      "path": "3"
    },
    "1154": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1156": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1157": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "ADD",
      "path": "3"
    },
    "1158": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "AND",
      "path": "3"
    },
    "1159": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1160": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "ADD",
      "path": "3"
    },
    "1161": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1162": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1164": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1165": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "POP",
      "path": "3"
    },
    "1166": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1167": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "ADD",
      "path": "3"
    },
    "1168": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1169": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x49A"
    },
    "1172": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1173": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1174": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x938"
    },
    "1177": {
      "fn": "handGame.pickType",
      "jump": "i",
      "offset": [
        3565,
        3750
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1178": {
      "fn": "handGame.pickType",
      "offset": [
        3565,
        3750
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1179": {
      "fn": "handGame.pickType",
      "offset": [
        3551,
        3562
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1181": {
      "fn": "handGame.pickType",
      "offset": [
        3551,
        3750
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1182": {
      "fn": "handGame.pickType",
      "offset": [
        3551,
        3750
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1183": {
      "fn": "handGame.pickType",
      "offset": [
        3551,
        3750
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1184": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3790
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 10,
      "value": "0x0"
    },
    "1186": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3790
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1187": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3790
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1188": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3790
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1189": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3777
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x8"
    },
    "1191": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3790
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1193": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3790
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1194": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3790
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1196": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3790
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1197": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3790
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1198": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3803
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1199": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3803
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1200": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1202": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1204": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1206": {
      "op": "SHL"
    },
    "1207": {
      "op": "SUB"
    },
    "1208": {
      "op": "NOT"
    },
    "1209": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3803
      ],
      "op": "AND",
      "path": "3"
    },
    "1210": {
      "fn": "handGame.pickType",
      "offset": [
        3793,
        3803
      ],
      "op": "CALLER",
      "path": "3"
    },
    "1211": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3803
      ],
      "op": "OR",
      "path": "3"
    },
    "1212": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3803
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1213": {
      "fn": "handGame.pickType",
      "offset": [
        3760,
        3803
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1214": {
      "op": "POP"
    },
    "1215": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1216": {
      "fn": "handGame.pickType",
      "offset": [
        3280,
        3810
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1217": {
      "op": "POP"
    },
    "1218": {
      "fn": "handGame.pickType",
      "jump": "o",
      "offset": [
        3280,
        3810
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1219": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4013,
        6364
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1220": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4138,
        4165
      ],
      "op": "DUP1",
      "path": "3",
      "statement": 11
    },
    "1221": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4138,
        4165
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1222": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4138,
        4165
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4D6"
    },
    "1225": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4138,
        4165
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1226": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4138,
        4151
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1228": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4138,
        4151
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1229": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4138,
        4165
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1231": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4138,
        4165
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1232": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4138,
        4165
      ],
      "op": "ADD",
      "path": "3"
    },
    "1233": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4138,
        4165
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1234": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4138,
        4165
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x77C"
    },
    "1237": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "i",
      "offset": [
        4138,
        4165
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1238": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4138,
        4165
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1239": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4138,
        4165
      ],
      "op": "POP",
      "path": "3"
    },
    "1240": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4250,
        4251
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 12,
      "value": "0x3"
    },
    "1242": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4244
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1244": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4245,
        4246
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1245": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1246": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1247": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1248": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "LT",
      "path": "3"
    },
    "1249": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4EC"
    },
    "1252": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1253": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x4EC"
    },
    "1256": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x951"
    },
    "1259": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "i",
      "offset": [
        4231,
        4247
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1260": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1261": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1262": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1264": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1265": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1267": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1269": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1270": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "ADD",
      "path": "3"
    },
    "1271": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4247
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1272": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4251
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x501"
    },
    "1275": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4251
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1276": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4251
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1277": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4251
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x967"
    },
    "1280": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "i",
      "offset": [
        4231,
        4251
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1281": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4231,
        4251
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1282": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4226,
        4252
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1284": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4226,
        4252
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1285": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4226,
        4252
      ],
      "op": "GT",
      "path": "3"
    },
    "1286": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4226,
        4252
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1287": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4226,
        4252
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x512"
    },
    "1290": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4226,
        4252
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1291": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4226,
        4252
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x512"
    },
    "1294": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4226,
        4252
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8BC"
    },
    "1297": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "i",
      "offset": [
        4226,
        4252
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1298": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4226,
        4252
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1299": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4223
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x9"
    },
    "1301": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1302": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1303": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "1305": {
      "op": "NOT"
    },
    "1306": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "AND",
      "path": "3"
    },
    "1307": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1309": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1310": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1312": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1313": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "GT",
      "path": "3"
    },
    "1314": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1315": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x52E"
    },
    "1318": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1319": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x52E"
    },
    "1322": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8BC"
    },
    "1325": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "i",
      "offset": [
        4211,
        4252
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1326": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1327": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "MUL",
      "path": "3"
    },
    "1328": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "OR",
      "path": "3"
    },
    "1329": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1330": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4211,
        4252
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1331": {
      "op": "POP"
    },
    "1332": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4468,
        4477
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1334": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4463
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1335": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4463
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1336": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4463
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1337": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4452
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x8"
    },
    "1339": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4463
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1341": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4463
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1342": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4463
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1343": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4463
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1344": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4463
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1346": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4463
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1347": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4463
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1348": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4463
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1349": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4463
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1350": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1352": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1354": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1356": {
      "op": "SHL"
    },
    "1357": {
      "op": "SUB"
    },
    "1358": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4435,
        4463
      ],
      "op": "AND",
      "path": "3"
    },
    "1359": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4464
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1360": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4464
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1361": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4434
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x6"
    },
    "1363": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4464
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1364": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4464
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1365": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4464
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1366": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4464
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1367": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4464
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1368": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4464
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1369": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4464
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xFF"
    },
    "1371": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4464
      ],
      "op": "AND",
      "path": "3"
    },
    "1372": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4477
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1374": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4477
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1375": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4477
      ],
      "op": "GT",
      "path": "3"
    },
    "1376": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4477
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1377": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4477
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x56C"
    },
    "1380": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4477
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1381": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4477
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x56C"
    },
    "1384": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4477
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8BC"
    },
    "1387": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "i",
      "offset": [
        4424,
        4477
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1388": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4477
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1389": {
      "branch": 21,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4424,
        4477
      ],
      "op": "SUB",
      "path": "3"
    },
    "1390": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4420,
        6311
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x64A"
    },
    "1393": {
      "branch": 21,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4420,
        6311
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1394": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4513,
        4526
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1396": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4526
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1397": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4509
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x9"
    },
    "1399": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4509
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1400": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4509
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xFF"
    },
    "1402": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4509
      ],
      "op": "AND",
      "path": "3"
    },
    "1403": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4526
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1405": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4526
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1406": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4526
      ],
      "op": "GT",
      "path": "3"
    },
    "1407": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4526
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1408": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4526
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x58B"
    },
    "1411": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4526
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1412": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4526
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x58B"
    },
    "1415": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4526
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8BC"
    },
    "1418": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "i",
      "offset": [
        4497,
        4526
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1419": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4526
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1420": {
      "branch": 22,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4497,
        4526
      ],
      "op": "SUB",
      "path": "3"
    },
    "1421": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4493,
        4969
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x633"
    },
    "1424": {
      "branch": 22,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4493,
        4969
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1425": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4591
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 13,
      "value": "0x0"
    },
    "1427": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4591
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1428": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4591
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1429": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4591
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1430": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4580
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x8"
    },
    "1432": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4591
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1434": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4591
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1435": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4591
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1437": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4591
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1438": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4591
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1439": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4591
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1440": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4546,
        4552
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x5"
    },
    "1442": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4546,
        4592
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1443": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4546,
        4592
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1444": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1446": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1448": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1450": {
      "op": "SHL"
    },
    "1451": {
      "op": "SUB"
    },
    "1452": {
      "op": "NOT"
    },
    "1453": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4546,
        4592
      ],
      "op": "AND",
      "path": "3"
    },
    "1454": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1456": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1458": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1460": {
      "op": "SHL"
    },
    "1461": {
      "op": "SUB"
    },
    "1462": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4591
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1463": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4591
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1464": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4563,
        4591
      ],
      "op": "AND",
      "path": "3"
    },
    "1465": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4546,
        4592
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1466": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4546,
        4592
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1467": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4546,
        4592
      ],
      "op": "OR",
      "path": "3"
    },
    "1468": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4546,
        4592
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1469": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4546,
        4592
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1470": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4693,
        4706
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "1472": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4693,
        4706
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1473": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4669,
        4706
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x5CA"
    },
    "1476": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4669,
        4706
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1477": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4669,
        4690
      ],
      "op": "SELFBALANCE",
      "path": "3"
    },
    "1478": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4669,
        4706
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x913"
    },
    "1481": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "i",
      "offset": [
        4669,
        4706
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1482": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4669,
        4706
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1483": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1485": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1486": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1488": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1489": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1490": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1491": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "DUP6",
      "path": "3"
    },
    "1492": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "DUP8",
      "path": "3"
    },
    "1493": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "GAS",
      "path": "3"
    },
    "1494": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "CALL",
      "path": "3"
    },
    "1495": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1496": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "POP",
      "path": "3"
    },
    "1497": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "POP",
      "path": "3"
    },
    "1498": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "POP",
      "path": "3"
    },
    "1499": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1500": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1501": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1503": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1504": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "EQ",
      "path": "3"
    },
    "1505": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x606"
    },
    "1508": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1509": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1511": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1512": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1513": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "POP",
      "path": "3"
    },
    "1514": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1F"
    },
    "1516": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "NOT",
      "path": "3"
    },
    "1517": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3F"
    },
    "1519": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1520": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "ADD",
      "path": "3"
    },
    "1521": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "AND",
      "path": "3"
    },
    "1522": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1523": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "ADD",
      "path": "3"
    },
    "1524": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1526": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1527": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1528": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1529": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1530": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "RETURNDATASIZE",
      "path": "3"
    },
    "1531": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1533": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1535": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "DUP5",
      "path": "3"
    },
    "1536": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "ADD",
      "path": "3"
    },
    "1537": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "RETURNDATACOPY",
      "path": "3"
    },
    "1538": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x60B"
    },
    "1541": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1542": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1543": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x60"
    },
    "1545": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1546": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "POP",
      "path": "3"
    },
    "1547": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1548": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4629,
        4728
      ],
      "op": "POP",
      "path": "3"
    },
    "1549": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4610,
        4728
      ],
      "op": "POP",
      "path": "3"
    },
    "1550": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4610,
        4728
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1551": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4610,
        4728
      ],
      "op": "POP",
      "path": "3"
    },
    "1552": {
      "branch": 23,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4807,
        4814
      ],
      "op": "DUP1",
      "path": "3",
      "statement": 14
    },
    "1553": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4802,
        4885
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x62D"
    },
    "1556": {
      "branch": 23,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4802,
        4885
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1557": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4845,
        4866
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1559": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4845,
        4866
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1560": {
      "op": "PUSH4",
      "value": "0x211C3105"
    },
    "1565": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1567": {
      "op": "SHL"
    },
    "1568": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4845,
        4866
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1569": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4845,
        4866
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1570": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4845,
        4866
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x4"
    },
    "1572": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4845,
        4866
      ],
      "op": "ADD",
      "path": "3"
    },
    "1573": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4845,
        4866
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1575": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4845,
        4866
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1576": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4845,
        4866
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1577": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4845,
        4866
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1578": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4845,
        4866
      ],
      "op": "SUB",
      "path": "3"
    },
    "1579": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4845,
        4866
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1580": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4845,
        4866
      ],
      "op": "REVERT",
      "path": "3"
    },
    "1581": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4802,
        4885
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1582": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4528,
        4899
      ],
      "op": "POP",
      "path": "3"
    },
    "1583": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4420,
        6311
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x741"
    },
    "1586": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4420,
        6311
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1587": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4493,
        4969
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1588": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4923,
        4929
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 15,
      "value": "0x5"
    },
    "1590": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4923,
        4954
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1591": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4923,
        4954
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1592": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1594": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1596": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1598": {
      "op": "SHL"
    },
    "1599": {
      "op": "SUB"
    },
    "1600": {
      "op": "NOT"
    },
    "1601": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4923,
        4954
      ],
      "op": "AND",
      "path": "3"
    },
    "1602": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4948,
        4952
      ],
      "op": "ADDRESS",
      "path": "3"
    },
    "1603": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4923,
        4954
      ],
      "op": "OR",
      "path": "3"
    },
    "1604": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4923,
        4954
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1605": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4923,
        4954
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1606": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4420,
        6311
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x741"
    },
    "1609": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4420,
        6311
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1610": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4420,
        6311
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1611": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5047,
        5057
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1613": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5043
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1615": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5042
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1616": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5042
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1617": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5042
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1618": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5031
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x8"
    },
    "1620": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5042
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1622": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5042
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1623": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5042
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1624": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5042
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1625": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5042
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1627": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5042
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1628": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5042
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1629": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5042
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1630": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5042
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1631": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1633": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1635": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1637": {
      "op": "SHL"
    },
    "1638": {
      "op": "SUB"
    },
    "1639": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5014,
        5042
      ],
      "op": "AND",
      "path": "3"
    },
    "1640": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5043
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1641": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5043
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1642": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5013
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x6"
    },
    "1644": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5043
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1645": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5043
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1646": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5043
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1647": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5043
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1648": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5043
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1649": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5043
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1650": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5043
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xFF"
    },
    "1652": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5043
      ],
      "op": "AND",
      "path": "3"
    },
    "1653": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5057
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1655": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5057
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1656": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5057
      ],
      "op": "GT",
      "path": "3"
    },
    "1657": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5057
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1658": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5057
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x685"
    },
    "1661": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5057
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1662": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5057
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x685"
    },
    "1665": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5057
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8BC"
    },
    "1668": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "i",
      "offset": [
        5003,
        5057
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1669": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5057
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1670": {
      "branch": 24,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5003,
        5057
      ],
      "op": "SUB",
      "path": "3"
    },
    "1671": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4999,
        6301
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x691"
    },
    "1674": {
      "branch": 24,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4999,
        6301
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1675": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5097,
        5106
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1677": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5081,
        5106
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x574"
    },
    "1680": {
      "branch": 25,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5081,
        5106
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1681": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4999,
        6301
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1682": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5679,
        5692
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1684": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5675
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x0"
    },
    "1686": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5674
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1687": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5674
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1688": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5674
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1689": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5663
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x8"
    },
    "1691": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5674
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1693": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5674
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1694": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5674
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1695": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5674
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1696": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5674
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1698": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5674
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1699": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5674
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1700": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5674
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1701": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5674
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1702": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1704": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1706": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1708": {
      "op": "SHL"
    },
    "1709": {
      "op": "SUB"
    },
    "1710": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5646,
        5674
      ],
      "op": "AND",
      "path": "3"
    },
    "1711": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5675
      ],
      "op": "DUP4",
      "path": "3"
    },
    "1712": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5675
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1713": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5645
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x6"
    },
    "1715": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5675
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1716": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5675
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1717": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5675
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1718": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5675
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1719": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5675
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1720": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5675
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1721": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5675
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xFF"
    },
    "1723": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5675
      ],
      "op": "AND",
      "path": "3"
    },
    "1724": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5692
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1726": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5692
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1727": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5692
      ],
      "op": "GT",
      "path": "3"
    },
    "1728": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5692
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1729": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5692
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6CC"
    },
    "1732": {
      "branch": 25,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5692
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1733": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5692
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6CC"
    },
    "1736": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5692
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8BC"
    },
    "1739": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "i",
      "offset": [
        5635,
        5692
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1740": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5692
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1741": {
      "branch": 26,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5635,
        5692
      ],
      "op": "SUB",
      "path": "3"
    },
    "1742": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5631,
        6287
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x72E"
    },
    "1745": {
      "branch": 26,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5631,
        6287
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1746": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5736,
        5746
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x1"
    },
    "1748": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5732
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x9"
    },
    "1750": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5732
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1751": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5732
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0xFF"
    },
    "1753": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5732
      ],
      "op": "AND",
      "path": "3"
    },
    "1754": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5746
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x2"
    },
    "1756": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5746
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1757": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5746
      ],
      "op": "GT",
      "path": "3"
    },
    "1758": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5746
      ],
      "op": "ISZERO",
      "path": "3"
    },
    "1759": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5746
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6EA"
    },
    "1762": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5746
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1763": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5746
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x6EA"
    },
    "1766": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5746
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x8BC"
    },
    "1769": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "i",
      "offset": [
        5720,
        5746
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1770": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5746
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1771": {
      "branch": 27,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5720,
        5746
      ],
      "op": "SUB",
      "path": "3"
    },
    "1772": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5716,
        6191
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x729"
    },
    "1775": {
      "branch": 27,
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5716,
        6191
      ],
      "op": "JUMPI",
      "path": "3"
    },
    "1776": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5819
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 16,
      "value": "0x0"
    },
    "1778": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5819
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1779": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5819
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1780": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5819
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1781": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5808
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x8"
    },
    "1783": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5819
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x20"
    },
    "1785": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5819
      ],
      "op": "MSTORE",
      "path": "3"
    },
    "1786": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5819
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1788": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5819
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1789": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5819
      ],
      "op": "KECCAK256",
      "path": "3"
    },
    "1790": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5819
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1791": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5774,
        5780
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x5"
    },
    "1793": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5774,
        5820
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1794": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5774,
        5820
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1795": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1797": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1799": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1801": {
      "op": "SHL"
    },
    "1802": {
      "op": "SUB"
    },
    "1803": {
      "op": "NOT"
    },
    "1804": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5774,
        5820
      ],
      "op": "AND",
      "path": "3"
    },
    "1805": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1807": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1809": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1811": {
      "op": "SHL"
    },
    "1812": {
      "op": "SUB"
    },
    "1813": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5819
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1814": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5819
      ],
      "op": "SWAP3",
      "path": "3"
    },
    "1815": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5791,
        5819
      ],
      "op": "AND",
      "path": "3"
    },
    "1816": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5774,
        5820
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1817": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5774,
        5820
      ],
      "op": "DUP3",
      "path": "3"
    },
    "1818": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5774,
        5820
      ],
      "op": "OR",
      "path": "3"
    },
    "1819": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5774,
        5820
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1820": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5774,
        5820
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1821": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5937,
        5950
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x3"
    },
    "1823": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5937,
        5950
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1824": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5913,
        5950
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x5CA"
    },
    "1827": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5913,
        5950
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1828": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5913,
        5934
      ],
      "op": "SELFBALANCE",
      "path": "3"
    },
    "1829": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5913,
        5950
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x913"
    },
    "1832": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "i",
      "offset": [
        5913,
        5950
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1833": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5716,
        6191
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1834": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5631,
        6287
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x741"
    },
    "1837": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5631,
        6287
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1838": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5631,
        6287
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1839": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6237,
        6243
      ],
      "op": "PUSH1",
      "path": "3",
      "statement": 17,
      "value": "0x5"
    },
    "1841": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6237,
        6268
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1842": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6237,
        6268
      ],
      "op": "SLOAD",
      "path": "3"
    },
    "1843": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1845": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1847": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1849": {
      "op": "SHL"
    },
    "1850": {
      "op": "SUB"
    },
    "1851": {
      "op": "NOT"
    },
    "1852": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6237,
        6268
      ],
      "op": "AND",
      "path": "3"
    },
    "1853": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6262,
        6266
      ],
      "op": "ADDRESS",
      "path": "3"
    },
    "1854": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6237,
        6268
      ],
      "op": "OR",
      "path": "3"
    },
    "1855": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6237,
        6268
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1856": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6237,
        6268
      ],
      "op": "SSTORE",
      "path": "3"
    },
    "1857": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        5631,
        6287
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1858": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "PUSH32",
      "path": "3",
      "statement": 18,
      "value": "0xEFB16D61046900DA527008568620FB9F8420E2F5ED4DE3BFBDED5035C9362B0E"
    },
    "1891": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6345,
        6356
      ],
      "op": "DUP2",
      "path": "3"
    },
    "1892": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1894": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1895": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x770"
    },
    "1898": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1899": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1900": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "PUSH2",
      "path": "3",
      "value": "0x989"
    },
    "1903": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "i",
      "offset": [
        6326,
        6357
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1904": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "JUMPDEST",
      "path": "3"
    },
    "1905": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "PUSH1",
      "path": "3",
      "value": "0x40"
    },
    "1907": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "MLOAD",
      "path": "3"
    },
    "1908": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "DUP1",
      "path": "3"
    },
    "1909": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "SWAP2",
      "path": "3"
    },
    "1910": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "SUB",
      "path": "3"
    },
    "1911": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "SWAP1",
      "path": "3"
    },
    "1912": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        6326,
        6357
      ],
      "op": "LOG1",
      "path": "3"
    },
    "1913": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4013,
        6364
      ],
      "op": "POP",
      "path": "3"
    },
    "1914": {
      "fn": "handGame.fulfillRandomWords",
      "offset": [
        4013,
        6364
      ],
      "op": "POP",
      "path": "3"
    },
    "1915": {
      "fn": "handGame.fulfillRandomWords",
      "jump": "o",
      "offset": [
        4013,
        6364
      ],
      "op": "JUMP",
      "path": "3"
    },
    "1916": {
      "op": "JUMPDEST"
    },
    "1917": {
      "op": "DUP3"
    },
    "1918": {
      "op": "DUP1"
    },
    "1919": {
      "op": "SLOAD"
    },
    "1920": {
      "op": "DUP3"
    },
    "1921": {
      "op": "DUP3"
    },
    "1922": {
      "op": "SSTORE"
    },
    "1923": {
      "op": "SWAP1"
    },
    "1924": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1926": {
      "op": "MSTORE"
    },
    "1927": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1929": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1931": {
      "op": "KECCAK256"
    },
    "1932": {
      "op": "SWAP1"
    },
    "1933": {
      "op": "DUP2"
    },
    "1934": {
      "op": "ADD"
    },
    "1935": {
      "op": "SWAP3"
    },
    "1936": {
      "op": "DUP3"
    },
    "1937": {
      "op": "ISZERO"
    },
    "1938": {
      "op": "PUSH2",
      "value": "0x7B7"
    },
    "1941": {
      "op": "JUMPI"
    },
    "1942": {
      "op": "SWAP2"
    },
    "1943": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1945": {
      "op": "MUL"
    },
    "1946": {
      "op": "DUP3"
    },
    "1947": {
      "op": "ADD"
    },
    "1948": {
      "op": "JUMPDEST"
    },
    "1949": {
      "op": "DUP3"
    },
    "1950": {
      "op": "DUP2"
    },
    "1951": {
      "op": "GT"
    },
    "1952": {
      "op": "ISZERO"
    },
    "1953": {
      "op": "PUSH2",
      "value": "0x7B7"
    },
    "1956": {
      "op": "JUMPI"
    },
    "1957": {
      "op": "DUP3"
    },
    "1958": {
      "op": "MLOAD"
    },
    "1959": {
      "op": "DUP3"
    },
    "1960": {
      "op": "SSTORE"
    },
    "1961": {
      "op": "SWAP2"
    },
    "1962": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1964": {
      "op": "ADD"
    },
    "1965": {
      "op": "SWAP2"
    },
    "1966": {
      "op": "SWAP1"
    },
    "1967": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1969": {
      "op": "ADD"
    },
    "1970": {
      "op": "SWAP1"
    },
    "1971": {
      "op": "PUSH2",
      "value": "0x79C"
    },
    "1974": {
      "op": "JUMP"
    },
    "1975": {
      "op": "JUMPDEST"
    },
    "1976": {
      "op": "POP"
    },
    "1977": {
      "op": "PUSH2",
      "value": "0x7C3"
    },
    "1980": {
      "op": "SWAP3"
    },
    "1981": {
      "op": "SWAP2"
    },
    "1982": {
      "op": "POP"
    },
    "1983": {
      "op": "PUSH2",
      "value": "0x7C7"
    },
    "1986": {
      "jump": "i",
      "op": "JUMP"
    },
    "1987": {
      "op": "JUMPDEST"
    },
    "1988": {
      "op": "POP"
    },
    "1989": {
      "op": "SWAP1"
    },
    "1990": {
      "jump": "o",
      "op": "JUMP"
    },
    "1991": {
      "op": "JUMPDEST"
    },
    "1992": {
      "op": "JUMPDEST"
    },
    "1993": {
      "op": "DUP1"
    },
    "1994": {
      "op": "DUP3"
    },
    "1995": {
      "op": "GT"
    },
    "1996": {
      "op": "ISZERO"
    },
    "1997": {
      "op": "PUSH2",
      "value": "0x7C3"
    },
    "2000": {
      "op": "JUMPI"
    },
    "2001": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2003": {
      "op": "DUP2"
    },
    "2004": {
      "op": "SSTORE"
    },
    "2005": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2007": {
      "op": "ADD"
    },
    "2008": {
      "op": "PUSH2",
      "value": "0x7C8"
    },
    "2011": {
      "op": "JUMP"
    },
    "2012": {
      "op": "JUMPDEST"
    },
    "2013": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2018": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2020": {
      "op": "SHL"
    },
    "2021": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2023": {
      "op": "MSTORE"
    },
    "2024": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "2026": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2028": {
      "op": "MSTORE"
    },
    "2029": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2031": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2033": {
      "op": "REVERT"
    },
    "2034": {
      "op": "JUMPDEST"
    },
    "2035": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2037": {
      "op": "DUP1"
    },
    "2038": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2040": {
      "op": "DUP4"
    },
    "2041": {
      "op": "DUP6"
    },
    "2042": {
      "op": "SUB"
    },
    "2043": {
      "op": "SLT"
    },
    "2044": {
      "op": "ISZERO"
    },
    "2045": {
      "op": "PUSH2",
      "value": "0x805"
    },
    "2048": {
      "op": "JUMPI"
    },
    "2049": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2051": {
      "op": "DUP1"
    },
    "2052": {
      "op": "REVERT"
    },
    "2053": {
      "op": "JUMPDEST"
    },
    "2054": {
      "op": "DUP3"
    },
    "2055": {
      "op": "CALLDATALOAD"
    },
    "2056": {
      "op": "SWAP2"
    },
    "2057": {
      "op": "POP"
    },
    "2058": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2060": {
      "op": "DUP1"
    },
    "2061": {
      "op": "DUP5"
    },
    "2062": {
      "op": "ADD"
    },
    "2063": {
      "op": "CALLDATALOAD"
    },
    "2064": {
      "op": "PUSH8",
      "value": "0xFFFFFFFFFFFFFFFF"
    },
    "2073": {
      "op": "DUP1"
    },
    "2074": {
      "op": "DUP3"
    },
    "2075": {
      "op": "GT"
    },
    "2076": {
      "op": "ISZERO"
    },
    "2077": {
      "op": "PUSH2",
      "value": "0x825"
    },
    "2080": {
      "op": "JUMPI"
    },
    "2081": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2083": {
      "op": "DUP1"
    },
    "2084": {
      "op": "REVERT"
    },
    "2085": {
      "op": "JUMPDEST"
    },
    "2086": {
      "op": "DUP2"
    },
    "2087": {
      "op": "DUP7"
    },
    "2088": {
      "op": "ADD"
    },
    "2089": {
      "op": "SWAP2"
    },
    "2090": {
      "op": "POP"
    },
    "2091": {
      "op": "DUP7"
    },
    "2092": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2094": {
      "op": "DUP4"
    },
    "2095": {
      "op": "ADD"
    },
    "2096": {
      "op": "SLT"
    },
    "2097": {
      "op": "PUSH2",
      "value": "0x839"
    },
    "2100": {
      "op": "JUMPI"
    },
    "2101": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2103": {
      "op": "DUP1"
    },
    "2104": {
      "op": "REVERT"
    },
    "2105": {
      "op": "JUMPDEST"
    },
    "2106": {
      "op": "DUP2"
    },
    "2107": {
      "op": "CALLDATALOAD"
    },
    "2108": {
      "op": "DUP2"
    },
    "2109": {
      "op": "DUP2"
    },
    "2110": {
      "op": "GT"
    },
    "2111": {
      "op": "ISZERO"
    },
    "2112": {
      "op": "PUSH2",
      "value": "0x84B"
    },
    "2115": {
      "op": "JUMPI"
    },
    "2116": {
      "op": "PUSH2",
      "value": "0x84B"
    },
    "2119": {
      "op": "PUSH2",
      "value": "0x7DC"
    },
    "2122": {
      "jump": "i",
      "op": "JUMP"
    },
    "2123": {
      "op": "JUMPDEST"
    },
    "2124": {
      "op": "DUP1"
    },
    "2125": {
      "op": "PUSH1",
      "value": "0x5"
    },
    "2127": {
      "op": "SHL"
    },
    "2128": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2130": {
      "op": "MLOAD"
    },
    "2131": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "2133": {
      "op": "NOT"
    },
    "2134": {
      "op": "PUSH1",
      "value": "0x3F"
    },
    "2136": {
      "op": "DUP4"
    },
    "2137": {
      "op": "ADD"
    },
    "2138": {
      "op": "AND"
    },
    "2139": {
      "op": "DUP2"
    },
    "2140": {
      "op": "ADD"
    },
    "2141": {
      "op": "DUP2"
    },
    "2142": {
      "op": "DUP2"
    },
    "2143": {
      "op": "LT"
    },
    "2144": {
      "op": "DUP6"
    },
    "2145": {
      "op": "DUP3"
    },
    "2146": {
      "op": "GT"
    },
    "2147": {
      "op": "OR"
    },
    "2148": {
      "op": "ISZERO"
    },
    "2149": {
      "op": "PUSH2",
      "value": "0x870"
    },
    "2152": {
      "op": "JUMPI"
    },
    "2153": {
      "op": "PUSH2",
      "value": "0x870"
    },
    "2156": {
      "op": "PUSH2",
      "value": "0x7DC"
    },
    "2159": {
      "jump": "i",
      "op": "JUMP"
    },
    "2160": {
      "op": "JUMPDEST"
    },
    "2161": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2163": {
      "op": "MSTORE"
    },
    "2164": {
      "op": "SWAP2"
    },
    "2165": {
      "op": "DUP3"
    },
    "2166": {
      "op": "MSTORE"
    },
    "2167": {
      "op": "DUP5"
    },
    "2168": {
      "op": "DUP3"
    },
    "2169": {
      "op": "ADD"
    },
    "2170": {
      "op": "SWAP3"
    },
    "2171": {
      "op": "POP"
    },
    "2172": {
      "op": "DUP4"
    },
    "2173": {
      "op": "DUP2"
    },
    "2174": {
      "op": "ADD"
    },
    "2175": {
      "op": "DUP6"
    },
    "2176": {
      "op": "ADD"
    },
    "2177": {
      "op": "SWAP2"
    },
    "2178": {
      "op": "DUP10"
    },
    "2179": {
      "op": "DUP4"
    },
    "2180": {
      "op": "GT"
    },
    "2181": {
      "op": "ISZERO"
    },
    "2182": {
      "op": "PUSH2",
      "value": "0x88E"
    },
    "2185": {
      "op": "JUMPI"
    },
    "2186": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2188": {
      "op": "DUP1"
    },
    "2189": {
      "op": "REVERT"
    },
    "2190": {
      "op": "JUMPDEST"
    },
    "2191": {
      "op": "SWAP4"
    },
    "2192": {
      "op": "DUP6"
    },
    "2193": {
      "op": "ADD"
    },
    "2194": {
      "op": "SWAP4"
    },
    "2195": {
      "op": "JUMPDEST"
    },
    "2196": {
      "op": "DUP3"
    },
    "2197": {
      "op": "DUP6"
    },
    "2198": {
      "op": "LT"
    },
    "2199": {
      "op": "ISZERO"
    },
    "2200": {
      "op": "PUSH2",
      "value": "0x8AC"
    },
    "2203": {
      "op": "JUMPI"
    },
    "2204": {
      "op": "DUP5"
    },
    "2205": {
      "op": "CALLDATALOAD"
    },
    "2206": {
      "op": "DUP5"
    },
    "2207": {
      "op": "MSTORE"
    },
    "2208": {
      "op": "SWAP4"
    },
    "2209": {
      "op": "DUP6"
    },
    "2210": {
      "op": "ADD"
    },
    "2211": {
      "op": "SWAP4"
    },
    "2212": {
      "op": "SWAP3"
    },
    "2213": {
      "op": "DUP6"
    },
    "2214": {
      "op": "ADD"
    },
    "2215": {
      "op": "SWAP3"
    },
    "2216": {
      "op": "PUSH2",
      "value": "0x893"
    },
    "2219": {
      "op": "JUMP"
    },
    "2220": {
      "op": "JUMPDEST"
    },
    "2221": {
      "op": "DUP1"
    },
    "2222": {
      "op": "SWAP7"
    },
    "2223": {
      "op": "POP"
    },
    "2224": {
      "op": "POP"
    },
    "2225": {
      "op": "POP"
    },
    "2226": {
      "op": "POP"
    },
    "2227": {
      "op": "POP"
    },
    "2228": {
      "op": "POP"
    },
    "2229": {
      "op": "POP"
    },
    "2230": {
      "op": "SWAP3"
    },
    "2231": {
      "op": "POP"
    },
    "2232": {
      "op": "SWAP3"
    },
    "2233": {
      "op": "SWAP1"
    },
    "2234": {
      "op": "POP"
    },
    "2235": {
      "jump": "o",
      "op": "JUMP"
    },
    "2236": {
      "op": "JUMPDEST"
    },
    "2237": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2242": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2244": {
      "op": "SHL"
    },
    "2245": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2247": {
      "op": "MSTORE"
    },
    "2248": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "2250": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2252": {
      "op": "MSTORE"
    },
    "2253": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2255": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2257": {
      "op": "REVERT"
    },
    "2258": {
      "op": "JUMPDEST"
    },
    "2259": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2261": {
      "op": "DUP2"
    },
    "2262": {
      "op": "ADD"
    },
    "2263": {
      "op": "PUSH1",
      "value": "0x3"
    },
    "2265": {
      "op": "DUP4"
    },
    "2266": {
      "op": "LT"
    },
    "2267": {
      "op": "PUSH2",
      "value": "0x8F4"
    },
    "2270": {
      "op": "JUMPI"
    },
    "2271": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2276": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2278": {
      "op": "SHL"
    },
    "2279": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2281": {
      "op": "MSTORE"
    },
    "2282": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "2284": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2286": {
      "op": "MSTORE"
    },
    "2287": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2289": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2291": {
      "op": "REVERT"
    },
    "2292": {
      "op": "JUMPDEST"
    },
    "2293": {
      "op": "SWAP2"
    },
    "2294": {
      "op": "SWAP1"
    },
    "2295": {
      "op": "MSTORE"
    },
    "2296": {
      "op": "SWAP1"
    },
    "2297": {
      "jump": "o",
      "op": "JUMP"
    },
    "2298": {
      "op": "JUMPDEST"
    },
    "2299": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2301": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2303": {
      "op": "DUP3"
    },
    "2304": {
      "op": "DUP5"
    },
    "2305": {
      "op": "SUB"
    },
    "2306": {
      "op": "SLT"
    },
    "2307": {
      "op": "ISZERO"
    },
    "2308": {
      "op": "PUSH2",
      "value": "0x90C"
    },
    "2311": {
      "op": "JUMPI"
    },
    "2312": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2314": {
      "op": "DUP1"
    },
    "2315": {
      "op": "REVERT"
    },
    "2316": {
      "op": "JUMPDEST"
    },
    "2317": {
      "op": "POP"
    },
    "2318": {
      "op": "CALLDATALOAD"
    },
    "2319": {
      "op": "SWAP2"
    },
    "2320": {
      "op": "SWAP1"
    },
    "2321": {
      "op": "POP"
    },
    "2322": {
      "jump": "o",
      "op": "JUMP"
    },
    "2323": {
      "op": "JUMPDEST"
    },
    "2324": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2326": {
      "op": "DUP3"
    },
    "2327": {
      "op": "DUP3"
    },
    "2328": {
      "op": "LT"
    },
    "2329": {
      "op": "ISZERO"
    },
    "2330": {
      "op": "PUSH2",
      "value": "0x933"
    },
    "2333": {
      "op": "JUMPI"
    },
    "2334": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2339": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2341": {
      "op": "SHL"
    },
    "2342": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2344": {
      "op": "MSTORE"
    },
    "2345": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "2347": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2349": {
      "op": "MSTORE"
    },
    "2350": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2352": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2354": {
      "op": "REVERT"
    },
    "2355": {
      "op": "JUMPDEST"
    },
    "2356": {
      "op": "POP"
    },
    "2357": {
      "op": "SUB"
    },
    "2358": {
      "op": "SWAP1"
    },
    "2359": {
      "jump": "o",
      "op": "JUMP"
    },
    "2360": {
      "op": "JUMPDEST"
    },
    "2361": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2363": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2365": {
      "op": "DUP3"
    },
    "2366": {
      "op": "DUP5"
    },
    "2367": {
      "op": "SUB"
    },
    "2368": {
      "op": "SLT"
    },
    "2369": {
      "op": "ISZERO"
    },
    "2370": {
      "op": "PUSH2",
      "value": "0x94A"
    },
    "2373": {
      "op": "JUMPI"
    },
    "2374": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2376": {
      "op": "DUP1"
    },
    "2377": {
      "op": "REVERT"
    },
    "2378": {
      "op": "JUMPDEST"
    },
    "2379": {
      "op": "POP"
    },
    "2380": {
      "op": "MLOAD"
    },
    "2381": {
      "op": "SWAP2"
    },
    "2382": {
      "op": "SWAP1"
    },
    "2383": {
      "op": "POP"
    },
    "2384": {
      "jump": "o",
      "op": "JUMP"
    },
    "2385": {
      "op": "JUMPDEST"
    },
    "2386": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2391": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2393": {
      "op": "SHL"
    },
    "2394": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2396": {
      "op": "MSTORE"
    },
    "2397": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "2399": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2401": {
      "op": "MSTORE"
    },
    "2402": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2404": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2406": {
      "op": "REVERT"
    },
    "2407": {
      "op": "JUMPDEST"
    },
    "2408": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2410": {
      "op": "DUP3"
    },
    "2411": {
      "op": "PUSH2",
      "value": "0x984"
    },
    "2414": {
      "op": "JUMPI"
    },
    "2415": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "2420": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "2422": {
      "op": "SHL"
    },
    "2423": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2425": {
      "op": "MSTORE"
    },
    "2426": {
      "op": "PUSH1",
      "value": "0x12"
    },
    "2428": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "2430": {
      "op": "MSTORE"
    },
    "2431": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "2433": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2435": {
      "op": "REVERT"
    },
    "2436": {
      "op": "JUMPDEST"
    },
    "2437": {
      "op": "POP"
    },
    "2438": {
      "op": "MOD"
    },
    "2439": {
      "op": "SWAP1"
    },
    "2440": {
      "jump": "o",
      "op": "JUMP"
    },
    "2441": {
      "op": "JUMPDEST"
    },
    "2442": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "2444": {
      "op": "DUP1"
    },
    "2445": {
      "op": "DUP3"
    },
    "2446": {
      "op": "MSTORE"
    },
    "2447": {
      "op": "DUP3"
    },
    "2448": {
      "op": "MLOAD"
    },
    "2449": {
      "op": "DUP3"
    },
    "2450": {
      "op": "DUP3"
    },
    "2451": {
      "op": "ADD"
    },
    "2452": {
      "op": "DUP2"
    },
    "2453": {
      "op": "SWAP1"
    },
    "2454": {
      "op": "MSTORE"
    },
    "2455": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "2457": {
      "op": "SWAP2"
    },
    "2458": {
      "op": "SWAP1"
    },
    "2459": {
      "op": "DUP5"
    },
    "2460": {
      "op": "DUP3"
    },
    "2461": {
      "op": "ADD"
    },
    "2462": {
      "op": "SWAP1"
    },
    "2463": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "2465": {
      "op": "DUP6"
    },
    "2466": {
      "op": "ADD"
    },
    "2467": {
      "op": "SWAP1"
    },
    "2468": {
      "op": "DUP5"
    },
    "2469": {
      "op": "JUMPDEST"
    },
    "2470": {
      "op": "DUP2"
    },
    "2471": {
      "op": "DUP2"
    },
    "2472": {
      "op": "LT"
    },
    "2473": {
      "op": "ISZERO"
    },
    "2474": {
      "op": "PUSH2",
      "value": "0x9C1"
    },
    "2477": {
      "op": "JUMPI"
    },
    "2478": {
      "op": "DUP4"
    },
    "2479": {
      "op": "MLOAD"
    },
    "2480": {
      "op": "DUP4"
    },
    "2481": {
      "op": "MSTORE"
    },
    "2482": {
      "op": "SWAP3"
    },
    "2483": {
      "op": "DUP5"
    },
    "2484": {
      "op": "ADD"
    },
    "2485": {
      "op": "SWAP3"
    },
    "2486": {
      "op": "SWAP2"
    },
    "2487": {
      "op": "DUP5"
    },
    "2488": {
      "op": "ADD"
    },
    "2489": {
      "op": "SWAP2"
    },
    "2490": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "2492": {
      "op": "ADD"
    },
    "2493": {
      "op": "PUSH2",
      "value": "0x9A5"
    },
    "2496": {
      "op": "JUMP"
    },
    "2497": {
      "op": "JUMPDEST"
    },
    "2498": {
      "op": "POP"
    },
    "2499": {
      "op": "SWAP1"
    },
    "2500": {
      "op": "SWAP7"
    },
    "2501": {
      "op": "SWAP6"
    },
    "2502": {
      "op": "POP"
    },
    "2503": {
      "op": "POP"
    },
    "2504": {
      "op": "POP"
    },
    "2505": {
      "op": "POP"
    },
    "2506": {
      "op": "POP"
    },
    "2507": {
      "op": "POP"
    },
    "2508": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "aea9a49ac0b72d803ddb9f449e1f312f93f7e28e",
  "source": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n\nerror Game_SendMoreToEnterGame();\nerror Game_TransferFailed();\n\ncontract handGame is VRFConsumerBaseV2 {\n    //1. Player enters the game paying a fee\n    //2. Computer picks a random type out of 3 (Rock, paper or Scissor) using VRF\n    //3. Player picks a type\n    //4. Compare computer and player type and select winner based on Rock, paper, Scissor winning pairs\n\n    VRFCoordinatorV2Interface immutable COORDINATOR;\n    LinkTokenInterface immutable LINKTOKEN;\n\n    // Your subscription ID.\n    uint64 immutable s_subscriptionId;\n\n    // The gas lane to use, which specifies the maximum gas price to bump to.\n    // For a list of available gas lanes on each network,\n    // see https://docs.chain.link/docs/vrf-contracts/#configurations\n    bytes32 immutable s_keyHash;\n\n    // Depends on the number of requested values that you want sent to the\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\n    // so 100,000 is a safe default for this example contract. Test and adjust\n    // this limit based on the network that you select, the size of the request,\n    // and the processing of the callback request in the fulfillRandomWords()\n    // function.\n    uint32 immutable s_callbackGasLimit = 100000;\n\n    // The default is 3, but you can set this higher.\n    uint16 immutable s_requestConfirmations = 3;\n\n    // For this example, retrieve 2 random values in one request.\n    // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\n    uint32 immutable s_numWords = 1;\n\n    uint256[] public s_randomWords;\n    uint256 public s_requestId;\n    address s_owner;\n\n    // Game variables\n\n    enum Hand {\n        ROCK,\n        PAPER,\n        SCISSORS\n    }\n    uint256 private i_entranceFee;\n    address payable[] private s_players;\n    address payable public winner;\n    mapping(address => Hand) private playerPick;\n    mapping(address => uint256) private addressToAmountFunded;\n    mapping(uint256 => address) private requestIdToPlayer;\n    Hand public computerHand;\n\n    // Events\n\n    event GameEntry(address indexed player);\n\n    event ReturnedRandomness(uint256[] randomWords);\n\n    constructor(\n        uint64 subscriptionId,\n        address vrfCoordinator,\n        address link,\n        bytes32 keyHash,\n        uint256 entranceFee\n    ) VRFConsumerBaseV2(vrfCoordinator) {\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\n        LINKTOKEN = LinkTokenInterface(link);\n        s_keyHash = keyHash;\n        s_owner = msg.sender;\n        s_subscriptionId = subscriptionId;\n        i_entranceFee = entranceFee;\n    }\n\n    /**\n     * @notice Requests randomness\n     * Assumes the subscription is funded sufficiently; \"Words\" refers to unit of data in Computer Science\n     */\n\n    function enterGame() public payable {\n        if (msg.value < i_entranceFee) {\n            revert Game_SendMoreToEnterGame();\n        }\n        s_players.push(payable(msg.sender));\n        addressToAmountFunded[msg.sender] = msg.value;\n        emit GameEntry(msg.sender);\n    }\n\n    function pickType(uint256 _hand) external returns (uint256) {\n        require(addressToAmountFunded[msg.sender] == i_entranceFee);\n        addressToAmountFunded[msg.sender] -= i_entranceFee;\n        Hand hand = Hand(_hand);\n        playerPick[msg.sender] = hand;\n        s_requestId = COORDINATOR.requestRandomWords(\n            s_keyHash,\n            s_subscriptionId,\n            s_requestConfirmations,\n            s_callbackGasLimit,\n            s_numWords\n        );\n        requestIdToPlayer[s_requestId] = msg.sender;\n    }\n\n    /**\n     * @notice Callback function used by VRF Coordinator\n     *\n     * @param requestId - id of the request\n     * @param randomWords - array of random results from VRF Coordinator\n     */\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\n        internal\n        override\n    {\n        s_randomWords = randomWords;\n        // Computer hand calculated\n        computerHand = Hand(s_randomWords[0] % 3);\n\n        // Check who is the winner\n        // Rock wins scissors (1 wins 3)\n        // Paper wins rock (2 wins 1)\n        // Scissors wins paper (3 wins 2)\n\n        if (playerPick[requestIdToPlayer[requestId]] == Hand.ROCK) {\n            if (computerHand == Hand.SCISSORS) {\n                winner = payable(requestIdToPlayer[requestId]);\n                (bool success, ) = winner.call{\n                    value: address(this).balance - i_entranceFee\n                }(\"\");\n                // require(success, \"Transfer failed\");\n                if (!success) {\n                    revert Game_TransferFailed();\n                }\n            } else {\n                winner = payable(address(this));\n            }\n        } else {\n            if (playerPick[requestIdToPlayer[requestId]] == Hand.PAPER) {\n                if (computerHand == Hand.ROCK) {\n                    winner = payable(requestIdToPlayer[requestId]);\n                    (bool success, ) = winner.call{\n                        value: address(this).balance - i_entranceFee\n                    }(\"\");\n                    // require(success, \"Transfer failed\");\n                    if (!success) {\n                        revert Game_TransferFailed();\n                    }\n                } else {\n                    winner = payable(address(this));\n                }\n            } else {\n                if (playerPick[requestIdToPlayer[requestId]] == Hand.SCISSORS) {\n                    if (computerHand == Hand.PAPER) {\n                        winner = payable(requestIdToPlayer[requestId]);\n                        (bool success, ) = winner.call{\n                            value: address(this).balance - i_entranceFee\n                        }(\"\");\n                        // require(success, \"Transfer failed\");\n                        if (!success) {\n                            revert Game_TransferFailed();\n                        }\n                    }\n                } else {\n                    winner = payable(address(this));\n                }\n            }\n        }\n\n        emit ReturnedRandomness(randomWords);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == s_owner);\n        _;\n    }\n}\n",
  "sourceMap": "340:6111:3:-:0;;;1501:6;1463:44;;1610:1;1568:43;;1767:1;1737:31;;2384:448;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;5599:32:0;;;;;;;2585:55:3::1;::::0;2650:36;;;::::1;;::::0;2696:19:::1;::::0;;;;2725:7:::1;:20:::0;;-1:-1:-1;;;;;;2725:20:3::1;2735:10;2725:20;::::0;;-1:-1:-1;;;;;2755:33:3;;::::1;;::::0;2798:13:::1;:27:::0;340:6111;;14:177:4;93:13;;-1:-1:-1;;;;;135:31:4;;125:42;;115:70;;181:1;178;171:12;115:70;14:177;;;:::o;196:582::-;301:6;309;317;325;333;386:3;374:9;365:7;361:23;357:33;354:53;;;403:1;400;393:12;354:53;429:16;;-1:-1:-1;;;;;474:30:4;;464:41;;454:69;;519:1;516;509:12;454:69;542:5;-1:-1:-1;566:49:4;611:2;596:18;;566:49;:::i;:::-;556:59;;634:49;679:2;668:9;664:18;634:49;:::i;:::-;723:2;708:18;;702:25;767:3;752:19;;;746:26;196:582;;;;-1:-1:-1;624:59:4;702:25;746:26;196:582;-1:-1:-1;;;196:582:4:o;:::-;340:6111:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/handGame.sol",
  "type": "contract"
}